ุณุฃููู ุงูุขู ุจุฅูุดุงุก ููู ูุตู (txt) ูุญุชูู ุนูู ุฌููุน ุงููุดุงูู ุงูุจุฑูุฌูุฉ ุงููุฐููุฑุฉุ ูุน ุงูุงูุชุฒุงู ุจุงูุชูุณูู ุงููุทููุจ ููู ูุดููุฉ. ุณุฃุจุฏุฃ ูู ุงููุดุงูู ุงูุดุงุฆุนุฉ ูุฃุณุชูุฑ ุญุชู ุงููุดุงูู ุงููุงุฏุฑุฉุ ูุน ุชุถููู ุซูุงุซุฉ ุชุญุฏูุงุช (ุณููุ ูุชูุณุทุ ุตุนุจ) ููู ูุฆุฉ.

-----

````txt
ูุดุงูู ุจุฑูุฌูุฉ

# ๐ข ุดุงุฆุนุฉ (Common / Frequent)

---
## ูุดุงูู ุงููุตูููุงุช ูุงูุณูุงุณู (Array & Sequence Problems)

### ุชุญุฏู 3: ุฅูุฌุงุฏ ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุชุงููุฉ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุฅูุฌุงุฏ ุทูู ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ (sub-array) ูุชุชุงููุฉ ูู ุงูุฃุนุฏุงุฏ ูู ูุตูููุฉ ูุนููุฉุ ุจุญูุซ ูุง ุชุญุชูู ุนูู ุฃู ุฃุฑูุงู ููุฑุฑุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [0, 1, 2, 1, 3, 2, 4]
ุงูุฅุฎุฑุงุฌ:
4
ุงูุดุฑุญ:
ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุชุงููุฉ ุจุฏูู ุชูุฑุงุฑ ูู [1, 3, 2, 4] ูุงูุชู ุทูููุง 4.
ุงููุต ุงููุณุงุนุฏ:
function lengthOfLongestUniqueSubstring(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, 4]
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, 1, 2, 3, 4]
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [0, 1, 2, 1, 3, 2, 4]
ุงููุฎุฑุฌุงุช (Outputs):
4

---
## ูุดุงูู ุงูุณูุงุณู ุงููุตูุฉ (String Problems)

### ุชุญุฏู 1: ุนูุณ ุณูุณูุฉ ูุตูุฉ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ. ูููุชู ูู ุนูุณ ุชุฑุชูุจ ุงูุญุฑูู ูู ูุฐู ุงูุณูุณูุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
s = "hello"
ุงูุฅุฎุฑุงุฌ:
"olleh"
ุงูุดุฑุญ:
ูุชู ุนูุณ ุชุฑุชูุจ ุงูุญุฑูู ูู ุงููููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function reverseString(s) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
s = "hello"
ุงููุฎุฑุฌุงุช (Outputs):
"olleh"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
s = "A man, a plan, a canal: Panama"
ุงููุฎุฑุฌุงุช (Outputs):
"amanaP :lanac a ,nalp a ,nam A"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
s = "12345"
ุงููุฎุฑุฌุงุช (Outputs):
"54321"

---
### ุชุญุฏู 2: ุงูุชุญูู ูู ูููู ูุชูุงุธุฑุงู (Palindrome)
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุงูุณูุณูุฉ ุงููุตูุฉ ุงููุฏุฎูุฉ ูุชูุงุธุฑุฉ (Palindrome) ุฃู ูุง. ุงูุณูุณูุฉ ุงููุชูุงุธุฑุฉ ูู ุงูุชู ุชูุฑุฃ ุจููุณ ุงูุทุฑููุฉ ูู ุงูุฃูุงู ูุงูุฎูู. ุนููู ุฃู ุชุฃุฎุฐ ูู ุงูุงุนุชุจุงุฑ ููุท ุงูุญุฑูู ูุงูุฃุฑูุงู ูุชุชุฌุงูู ุงููุณุงูุงุช ูุนูุงูุงุช ุงูุชุฑููู ูุชุชุฌุงูู ุญุงูุฉ ุงูุญุฑู (ุญุฑู ูุจูุฑ ุฃู ุตุบูุฑ).
ุงููุซุงู:
ุงููุฏุฎู:
s = "A man, a plan, a canal: Panama"
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุจุนุฏ ุชูุธูู ุงูุณูุณูุฉ ูุชุฌุงูู ุงูุญุฑูู ุงููุจูุฑุฉุ ุชุตุจุญ "amanaplanacanalpanama" ููู ุณูุณูุฉ ูุชูุงุธุฑุฉ.
ุงููุต ุงููุณุงุนุฏ:
function isPalindrome(s) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
s = "A man, a plan, a canal: Panama"
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
s = "race a car"
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
s = " "
ุงููุฎุฑุฌุงุช (Outputs):
true

---
### ุชุญุฏู 3: ุฅูุฌุงุฏ ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ุจุฏูู ุชูุฑุงุฑ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุทูู ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุชุงููุฉ ูุง ุชุญุชูู ุนูู ุฃู ุฃุญุฑู ููุฑุฑุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
s = "abcabcbb"
ุงูุฅุฎุฑุงุฌ:
3
ุงูุดุฑุญ:
ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ุจุฏูู ุฃุญุฑู ููุฑุฑุฉ ูู "abc" ูุทูููุง 3.
ุงููุต ุงููุณุงุนุฏ:
function lengthOfLongestSubstring(s) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
s = "abcabcbb"
ุงููุฎุฑุฌุงุช (Outputs):
3
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
s = "bbbbb"
ุงููุฎุฑุฌุงุช (Outputs):
1
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
s = "pwwkew"
ุงููุฎุฑุฌุงุช (Outputs):
3

---
## ูุดุงูู ุงูุจุญุซ ูุงูุชุฑุชูุจ (Searching & Sorting)

### ุชุญุฏู 1: ุงูุจุญุซ ุงูุซูุงุฆู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ูู ุงูุฃุฑูุงู ูุฑุชุจุฉ ุชุตุงุนุฏููุง ููููุฉ ูุณุชูุฏูุฉ. ูููุชู ูู ูุชุงุจุฉ ุฏุงูุฉ ุชููู ุจุงูุจุญุซ ุงูุซูุงุฆู (Binary Search) ุนู ุงููููุฉ ุงููุณุชูุฏูุฉ. ุฅุฐุง ูุฌุฏุช ุงููููุฉุ ุฃุฑุฌุน ูุคุดุฑูุงุ ูุฅูุงุ ุฃุฑุฌุน -1.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [-1, 0, 3, 5, 9, 12]
target = 9
ุงูุฅุฎุฑุงุฌ:
4
ุงูุดุฑุญ:
ุงููููุฉ 9 ููุฌูุฏุฉ ูู ุงููุคุดุฑ 4.
ุงููุต ุงููุณุงุนุฏ:
function binarySearch(nums, target) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [-1, 0, 3, 5, 9, 12], target = 9
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [-1, 0, 3, 5, 9, 12], target = 2
ุงููุฎุฑุฌุงุช (Outputs):
-1
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [5], target = 5
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 2: ุฏูุฌ ูุตูููุชูู ูุฑุชุจุชูู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุชูู ูู ุงูุฃุฑูุงู ุงูุตุญูุญุฉ ุงููุฑุชุจุฉ ุชุตุงุนุฏููุงุ `nums1` ู `nums2`. ูููุชู ูู ุฏูุฌ `nums2` ูู `nums1` ุจุญูุซ ุชููู `nums1` ูุฑุชุจุฉ ุชุตุงุนุฏููุง ุฃูุถูุง. ูุฌุจ ุฃู ูุชู ุงูุฏูุฌ ูู ููุณ ุงููุตูููุฉ `nums1` ุฏูู ุฅูุดุงุก ูุตูููุฉ ุฌุฏูุฏุฉ. ููููู ุงูุงูุชุฑุงุถ ุฃู `nums1` ูุฏููุง ูุณุงุญุฉ ูุงููุฉ ูุงุณุชูุนุงุจ ุฌููุน ุนูุงุตุฑ `nums2`.
ุงููุซุงู:
ุงููุฏุฎู:
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3
ุงูุฅุฎุฑุงุฌ:
nums1 = [1, 2, 2, 3, 5, 6]
ุงูุดุฑุญ:
ูุถูู ุนูุงุตุฑ `nums2` ุฅูู `nums1` ููุฌุนููุง ูุฑุชุจุฉ.
ุงููุต ุงููุณุงุนุฏ:
function mergeSortedArrays(nums1, m, nums2, n) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3
ุงููุฎุฑุฌุงุช (Outputs):
[1, 2, 2, 3, 5, 6]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums1 = [1], m = 1, nums2 = [], n = 0
ุงููุฎุฑุฌุงุช (Outputs):
[1]
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums1 = [0], m = 0, nums2 = [1], n = 1
ุงููุฎุฑุฌุงุช (Outputs):
[1]

---
### ุชุญุฏู 3: ุชุฑุชูุจ ุงูุฃููุงู (Dutch National Flag Problem)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ุชุญุชูู ุนูู ุฃุฑูุงู 0ุ 1ุ ู 2 ููุท. ูููุชู ูู ุชุฑุชูุจ ูุฐู ุงูุฃุฑูุงู ูู ููุงููุง (in-place) ุจุญูุซ ุชุธูุฑ ุฌููุน ุงูุฃุตูุงุฑ ุฃููุงูุ ุซู ุฌููุน ุงููุงุญุฏุงุชุ ูุฃุฎูุฑุงู ุฌููุน ุงูุงุซูุงู. ูุฌุจ ุฃู ูุชู ุงูุญู ุฏูู ุงุณุชุฎุฏุงู ุฃู ุฏูุงู ุชุฑุชูุจ ุฌุงูุฒุฉ (ูุซู `sort()`).
ุงููุซุงู:
ุงููุฏุฎู:
nums = [2, 0, 2, 1, 1, 0]
ุงูุฅุฎุฑุงุฌ:
[0, 0, 1, 1, 2, 2]
ุงูุดุฑุญ:
ูุชู ุชุฑุชูุจ ุงูุฃุฑูุงู 0, 1, ู 2 ูู ุงููุตูููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function sortColors(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [2, 0, 2, 1, 1, 0]
ุงููุฎุฑุฌุงุช (Outputs):
[0, 0, 1, 1, 2, 2]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [2, 0, 1]
ุงููุฎุฑุฌุงุช (Outputs):
[0, 1, 2]
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [0]
ุงููุฎุฑุฌุงุช (Outputs):
[0]

---
## ูุดุงูู ุงูุจุฑูุฌุฉ ุงูุฏููุงููููุฉ (Dynamic Programming)

### ุชุญุฏู 1: ุชุณูู ุงูุฏุฑุฌ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูุฏูู ุฏุฑุฌ ุจู n ูู ุงูุฏุฑุฌุงุช. ูู ูู ูุฑุฉ ููููู ุฃู ุชุชุณูู 1 ุฃู 2 ุฏุฑุฌุฉ. ูู ุนุฏุฏ ุงูุทุฑู ุงููุฎุชููุฉ ุงูุชู ููููู ูู ุฎูุงููุง ุชุณูู ุงูุฏุฑุฌ ูููุตูู ุฅูู ุงูููุฉุ
ุงููุซุงู:
ุงููุฏุฎู:
n = 3
ุงูุฅุฎุฑุงุฌ:
3
ุงูุดุฑุญ:
ููุงู 3 ุทุฑู:
1. 1 ุฏุฑุฌุฉ + 1 ุฏุฑุฌุฉ + 1 ุฏุฑุฌุฉ
2. 1 ุฏุฑุฌุฉ + 2 ุฏุฑุฌุฉ
3. 2 ุฏุฑุฌุฉ + 1 ุฏุฑุฌุฉ
ุงููุต ุงููุณุงุนุฏ:
function climbStairs(n) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
n = 2
ุงููุฎุฑุฌุงุช (Outputs):
2
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
n = 3
ุงููุฎุฑุฌุงุช (Outputs):
3
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
n = 5
ุงููุฎุฑุฌุงุช (Outputs):
8

---
### ุชุญุฏู 2: ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุฒุงูุฏุฉ
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ูู ุงูุฃุฑูุงู ุงูุตุญูุญุฉ ุบูุฑ ุงููุฑุชุจุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุทูู ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุฒุงูุฏุฉ (Longest Increasing Subsequence - LIS). ูุง ูุฌุจ ุฃู ุชููู ุงูุณูุณูุฉ ุงูุฌุฒุฆูุฉ ูุชุชุงููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [10, 9, 2, 5, 3, 7, 101, 18]
ุงูุฅุฎุฑุงุฌ:
4
ุงูุดุฑุญ:
ุฃุทูู ุณูุณูุฉ ุฌุฒุฆูุฉ ูุชุฒุงูุฏุฉ ูู [2, 3, 7, 101] ูุทูููุง 4.
ุงููุต ุงููุณุงุนุฏ:
function lengthOfLIS(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [10, 9, 2, 5, 3, 7, 101, 18]
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [0, 1, 0, 3, 2, 3]
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [7, 7, 7, 7, 7, 7, 7]
ุงููุฎุฑุฌุงุช (Outputs):
1

---
### ุชุญุฏู 3: ูุดููุฉ ุญููุจุฉ ุงูุธูุฑ (Knapsack Problem)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูุฏูู ุญููุจุฉ ุธูุฑ ุจุณุนุฉ ูุฒู ูุนููุฉ (W) ููุฌููุนุฉ ูู ุงูุฃุบุฑุงุถุ ูู ุบุฑุถ ูู ูุฒูู ููููุชู. ูููุชู ูู ุงุฎุชูุงุฑ ูุฌููุนุฉ ูู ุงูุฃุบุฑุงุถ ููุถุนูุง ูู ุงูุญููุจุฉ ุจุญูุซ ุชููู ุงููููุฉ ุงูุฅุฌูุงููุฉ ูููุฌููุนุฉ ุงููุฎุชุงุฑุฉ ูู ุงูุฃูุจุฑุ ูุน ุนุฏู ุชุฌุงูุฒ ุงูุณุนุฉ ุงููุญุฏุฏุฉ ููุญููุจุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
weights = [1, 2, 3]
values = [60, 100, 120]
W = 5
ุงูุฅุฎุฑุงุฌ:
220
ุงูุดุฑุญ:
ููููู ุงุฎุชูุงุฑ ุงูุบุฑุถูู ุจูุฒู 2 ู 3ุ ูููุชููุง 100 + 120 = 220ุ ููุฒูููุง ุงูุฅุฌูุงูู 5ุ ููู ุถูู ุงูุณุนุฉ.
ุงููุต ุงููุณุงุนุฏ:
function knapsack(weights, values, W) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
weights = [1, 2, 3], values = [60, 100, 120], W = 5
ุงููุฎุฑุฌุงุช (Outputs):
220
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
weights = [2, 3, 4, 5], values = [3, 4, 5, 6], W = 5
ุงููุฎุฑุฌุงุช (Outputs):
7
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
weights = [10, 20, 30], values = [60, 100, 120], W = 50
ุงููุฎุฑุฌุงุช (Outputs):
160

---
## ูุดุงูู ุงูุฌุดุน (Greedy Problems)

### ุชุญุฏู 1: ุญุณุงุจ ุฃูู ุนุฏุฏ ูู ุงูุนููุงุช
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุฌููุนุฉ ูู ูุฆุงุช ุงูุนููุงุช ููููุฉ ูุนููุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุฃูู ุนุฏุฏ ูู ุงูุนููุงุช ูููู ุงุณุชุฎุฏุงูู ูุชูููู ุงููููุฉ ุงููุญุฏุฏุฉ. ููููู ุงุณุชุฎุฏุงู ุฃู ุนุฏุฏ ูู ุงูุนููุงุช ูู ูู ูุฆุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
coins = [1, 2, 5]
amount = 11
ุงูุฅุฎุฑุงุฌ:
3
ุงูุดุฑุญ:
ูููู ุชูููู ุงููููุฉ 11 ุจุงุณุชุฎุฏุงู 5 + 5 + 1ุ ุฃู 3 ุนููุงุช.
ุงููุต ุงููุณุงุนุฏ:
function coinChange(coins, amount) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
coins = [1, 2, 5], amount = 11
ุงููุฎุฑุฌุงุช (Outputs):
3
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
coins = [2], amount = 3
ุงููุฎุฑุฌุงุช (Outputs):
-1
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
coins = [1], amount = 0
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 2: ุงุฎุชูุงุฑ ุงูุฃูุดุทุฉ
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูุฏูู ูุงุฆูุฉ ูู ุงูุฃูุดุทุฉุ ูู ูุดุงุท ูู ููุช ุจุฏุงูุฉ ูููุช ููุงูุฉ. ูููุชู ูู ุงุฎุชูุงุฑ ุฃูุจุฑ ุนุฏุฏ ูููู ูู ุงูุฃูุดุทุฉ ุงูุชู ููููู ุงูููุงู ุจูุงุ ุจุดุฑุท ุฃูุง ูุชุฏุงุฎู ุฃู ูุดุงุทูู ูุน ุจุนุถููุง ุงูุจุนุถ.
ุงููุซุงู:
ุงููุฏุฎู:
activities = [[1, 2], [3, 4], [0, 6], [5, 7], [8, 9], [5, 9]]
ุงูุฅุฎุฑุงุฌ:
4
ุงูุดุฑุญ:
ูููู ุงุฎุชูุงุฑ ุงูุฃูุดุทุฉ [1, 2] ู [3, 4] ู [5, 7] ู [8, 9]ุ ููุฐุง ูุนุทู 4 ุฃูุดุทุฉ.
ุงููุต ุงููุณุงุนุฏ:
function activitySelection(activities) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
activities = [[1, 2], [3, 4], [0, 6], [5, 7], [8, 9], [5, 9]]
ุงููุฎุฑุฌุงุช (Outputs):
4
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
activities = [[7, 9], [2, 4], [4, 8]]
ุงููุฎุฑุฌุงุช (Outputs):
2
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
activities = [[1, 2], [2, 3]]
ุงููุฎุฑุฌุงุช (Outputs):
2

---
### ุชุญุฏู 3: ุงูุชูุฒูุน ุงูุฃูุตู ููููุงุฑุฏ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุนุฏุฏูุง ูู ุงูููุงู ููุฌููุนุฉ ูู ุงูุนูุงู. ูู ูููุฉ ููุง ููุช ุฅูุฌุงุฒ ูุนูู. ูููุชู ูู ุชูุฒูุน ูุฐู ุงูููุงู ุนูู ุงูุนูุงู ุจุญูุซ ูููู ุฃูุตู ููุช ุฅูุฌุงุฒ (ุฃู ุฃุทูู ููุช ุนูู ูุฃู ุนุงูู) ูู ุงูุฃูู ูุง ูููู.
ุงููุซุงู:
ุงููุฏุฎู:
tasks = [10, 7, 8, 12]
workers = 2
ุงูุฅุฎุฑุงุฌ:
19
ุงูุดุฑุญ:
ูููู ุชูุฒูุน ุงูููุงู ุนูู ุงููุญู ุงูุชุงูู:
ุงูุนุงูู ุงูุฃูู: [10, 8]ุ ูุฌููุน ุงูููุช 18.
ุงูุนุงูู ุงูุซุงูู: [7, 12]ุ ูุฌููุน ุงูููุช 19.
ุฃูุตู ููุช ุนูู ูุฃู ุนุงูู ูู 19.
ุงููุต ุงููุณุงุนุฏ:
function minTimeForTasks(tasks, workers) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
tasks = [10, 7, 8, 12], workers = 2
ุงููุฎุฑุฌุงุช (Outputs):
19
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
tasks = [1, 2, 3, 4, 5, 6], workers = 3
ุงููุฎุฑุฌุงุช (Outputs):
7
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
tasks = [1, 1, 1, 1], workers = 2
ุงููุฎุฑุฌุงุช (Outputs):
2

---
## ูุดุงูู ุงูุฑุณูู ุงูุจูุงููุฉ (Graph Problems)

### ุชุญุฏู 1: ุงูุจุญุซ ูู ุงูุนูู (DFS)
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฑุณู ุจูุงูู (ุบูุฑ ููุฌู) ููุซู ูุงุฆูุฉ ุชุฌุงูุฑ (Adjacency List). ูููุชู ูู ุชูููุฐ ุฎูุงุฑุฒููุฉ ุงูุจุญุซ ูู ุงูุนูู (DFS) ุจุฏุกูุง ูู ุนูุฏุฉ ูุนููุฉุ ูุฅุฑุฌุงุน ุฌููุน ุงูุนูุฏ ุงูุชู ุชู ุงููุตูู ุฅูููุง ุจุชุฑุชูุจ ุงูุฒูุงุฑุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
graph = {
  'A': ['B', 'C'],
  'B': ['A', 'D', 'E'],
  'C': ['A', 'F'],
  'D': ['B'],
  'E': ['B', 'F'],
  'F': ['C', 'E']
}
startNode = 'A'
ุงูุฅุฎุฑุงุฌ:
['A', 'B', 'D', 'E', 'F', 'C']
ุงูุดุฑุญ:
ูุชู ุฒูุงุฑุฉ ุงูุนูุฏ ูู ุงูุฑุณู ุงูุจูุงูู ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ DFS.
ุงููุต ุงููุณุงุนุฏ:
function dfsTraversal(graph, startNode) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
graph = {'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A'], 'D': ['B']}, startNode = 'A'
ุงููุฎุฑุฌุงุช (Outputs):
['A', 'B', 'D', 'C']
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
graph = {'1': ['2', '3'], '2': ['1'], '3': ['1']}, startNode = '1'
ุงููุฎุฑุฌุงุช (Outputs):
['1', '2', '3']
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
graph = {'A': ['B'], 'B': ['A']}, startNode = 'A'
ุงููุฎุฑุฌุงุช (Outputs):
['A', 'B']

---
### ุชุญุฏู 2: ุฃูุตุฑ ูุณุงุฑ ูู ุฑุณู ุจูุงูู ุบูุฑ ูุฑุฌุญ
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฑุณู ุจูุงูู (ุบูุฑ ููุฌู ูุบูุฑ ูุฑุฌุญ) ููุซู ูุงุฆูุฉ ุชุฌุงูุฑุ ูุนูุฏุฉ ุจุฏุงูุฉุ ูุนูุฏุฉ ููุงูุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุทูู ุฃูุตุฑ ูุณุงุฑ ุจูู ุนูุฏุฉ ุงูุจุฏุงูุฉ ูุงูููุงูุฉ. ุฅุฐุง ูู ููู ููุงู ูุณุงุฑุ ุฃุฑุฌุน -1.
ุงููุซุงู:
ุงููุฏุฎู:
graph = {
  'A': ['B', 'C'],
  'B': ['A', 'D', 'E'],
  'C': ['A', 'F'],
  'D': ['B'],
  'E': ['B', 'F'],
  'F': ['C', 'E']
}
startNode = 'A'
endNode = 'F'
ุงูุฅุฎุฑุงุฌ:
2
ุงูุดุฑุญ:
ุฃูุตุฑ ูุณุงุฑ ูู A -> C -> F. ุทููู 2.
ุงููุต ุงููุณุงุนุฏ:
function shortestPath(graph, startNode, endNode) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
graph = {'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A'], 'D': ['B']}, startNode = 'A', endNode = 'D'
ุงููุฎุฑุฌุงุช (Outputs):
2
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
graph = {'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}, startNode = 'A', endNode = 'D'
ุงููุฎุฑุฌุงุช (Outputs):
-1
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
graph = {'1': ['2', '3'], '2': ['1', '4'], '3': ['1', '4'], '4': ['2', '3']}, startNode = '1', endNode = '4'
ุงููุฎุฑุฌุงุช (Outputs):
2

---
### ุชุญุฏู 3: ุฎูุงุฑุฒููุฉ ุฏุงูุฌุณุชุฑุง (Dijkstra's Algorithm)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฑุณู ุจูุงูู ูุฑุฌุญ ููุซู ูุงุฆูุฉ ุชุฌุงูุฑ (Adjacency List) ูุน ุฃูุฒุงู. ูููุชู ูู ุฅูุฌุงุฏ ุฃูุตุฑ ูุณุงุฑ ูู ุนูุฏุฉ ุจุฏุงูุฉ ูุนููุฉ ุฅูู ุฌููุน ุงูุนูุฏ ุงูุฃุฎุฑู.
ุงููุซุงู:
ุงููุฏุฎู:
graph = {
  'A': [['B', 1], ['C', 4]],
  'B': [['A', 1], ['C', 2], ['D', 5]],
  'C': [['A', 4], ['B', 2], ['D', 1]],
  'D': [['B', 5], ['C', 1]]
}
startNode = 'A'
ุงูุฅุฎุฑุงุฌ:
{'A': 0, 'B': 1, 'C': 3, 'D': 4}
ุงูุดุฑุญ:
ุชูุถุญ ุงููุฎุฑุฌุงุช ุฃูุตุฑ ูุณุงูุฉ ูู ุงูุนูุฏุฉ A ุฅูู ุฌููุน ุงูุนูุฏ ุงูุฃุฎุฑู.
ุงููุต ุงููุณุงุนุฏ:
function dijkstra(graph, startNode) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
graph = {'A': [['B', 1], ['C', 4]], 'B': [['A', 1], ['C', 2], ['D', 5]], 'C': [['A', 4], ['B', 2], ['D', 1]], 'D': [['B', 5], ['C', 1]]}, startNode = 'A'
ุงููุฎุฑุฌุงุช (Outputs):
{'A': 0, 'B': 1, 'C': 3, 'D': 4}
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
graph = {'S': [['A', 10], ['B', 15]], 'A': [['S', 10], ['C', 2]], 'B': [['S', 15], ['C', 5], ['D', 10]], 'C': [['A', 2], ['B', 5], ['D', 3]], 'D': [['B', 10], ['C', 3]]}, startNode = 'S'
ุงููุฎุฑุฌุงุช (Outputs):
{'S': 0, 'A': 10, 'B': 15, 'C': 12, 'D': 15}

---
## ูุดุงูู ุงูููุงูู ุงูุจูุงููุฉ ุงูุฎุงุตุฉ (Data Structure Problems)

### ุชุญุฏู 1: ุงูุชุญูู ูู ุงูุฃููุงุณ ุงููุชูุงุฒูุฉ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ุชุญุชูู ุนูู ุฃููุงุณ ููุท: `(`, `)`, `{`, `}`, `[`, `]`. ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุงูุฃููุงุณ ูุชูุงุฒูุฉ (balanced) ูุตุญูุญุฉ. ุงูุฃููุงุณ ุงููุชูุงุฒูุฉ ุชุนูู ุฃู ูู ููุณ ูุชุญ ูู ููุณ ุฅุบูุงู ูุทุงุจู ููุธูุฑ ุจุงูุชุฑุชูุจ ุงูุตุญูุญ.
ุงููุซุงู:
ุงููุฏุฎู:
s = "()[]{}"
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุฌููุน ุงูุฃููุงุณ ููุง ุฃุฒูุงุฌ ูุทุงุจูุฉ ูุจุงูุชุฑุชูุจ ุงูุตุญูุญ.
ุงููุต ุงููุณุงุนุฏ:
function isValidParentheses(s) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
s = "()[]{}"
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
s = "(]"
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
s = "([)]"
ุงููุฎุฑุฌุงุช (Outputs):
false

---
### ุชุญุฏู 2: ุชูููุฐ ุทุงุจูุฑ ุจุงุณุชุฎุฏุงู ููุฏุณูู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชุตููู ุทุงุจูุฑ (Queue) ุจุงุณุชุฎุฏุงู ููุฏุณูู (Stacks) ููุท. ูุฌุจ ุฃู ุชุฏุนู ุงูุฎูุงุฑุฒููุฉ ุงูุนูููุงุช ุงูุฃุณุงุณูุฉ ููุทุงุจูุฑ: `push` (ุฅุถุงูุฉ ุนูุตุฑ)ุ ู `pop` (ุฅุฒุงูุฉ ุนูุตุฑ)ุ ู `peek` (ุฅุธูุงุฑ ุงูุนูุตุฑ ุงูุฃูู)ุ ู `empty` (ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงูุทุงุจูุฑ ูุงุฑุบูุง).
ุงููุซุงู:
ุงููุฏุฎู:
Queue myQueue = new Queue();
myQueue.push(1);
myQueue.push(2);
myQueue.peek(); // return 1
myQueue.pop();  // return 1
myQueue.empty(); // return false
ุงูุฅุฎุฑุงุฌ:
1
1
false
ุงูุดุฑุญ:
ูุชู ุชูููุฐ ุงูุทุงุจูุฑ ุจุงุณุชุฎุฏุงู ููุฏุณููุ ุญูุซ ูุชู ุงุณุชุฎุฏุงู ุฃุญุฏููุง ูุฅุฏุฎุงู ุงูุนูุงุตุฑ ูุงูุขุฎุฑ ูุฅุฎุฑุงุฌูุง ุจุงูุชุฑุชูุจ ุงูุตุญูุญ.
ุงููุต ุงููุณุงุนุฏ:
class MyQueue {
  constructor() {
    this.inStack = [];
    this.outStack = [];
  }
  push(x) {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
  pop() {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
  peek() {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
  empty() {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
ุนูููุงุช: ["MyQueue", "push", "push", "peek", "pop", "empty"], ููู: [[], [1], [2], [], [], []]
ุงููุฎุฑุฌุงุช (Outputs):
[null, null, null, 1, 1, false]

---
### ุชุญุฏู 3: ุชูููุฐ LRU Cache
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชุตููู ูุชูููุฐ ุฐุงูุฑุฉ ุชุฎุฒูู ูุคูุช (Cache) ุชุชุจุน ุณูุงุณุฉ ุงูุฅุฒุงูุฉ LRU (Least Recently Used). ูุฌุจ ุฃู ุชุฏุนู ุงูุฎูุงุฑุฒููุฉ ุงูุนูููุชูู ุงูุฃุณุงุณูุชูู: `get` (ุงูุญุตูู ุนูู ูููุฉ ุจููุชุงุญ ูุนูู) ู `put` (ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ุฒูุฌ ูู ุงูููุชุงุญ-ุงููููุฉ).
ุงููุซุงู:
ุงููุฏุฎู:
LRUCache cache = new LRUCache(2);
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);    // return 1
cache.put(3, 3); // removes key 2
cache.get(2);    // return -1 (not found)
cache.put(4, 4); // removes key 1
cache.get(1);    // return -1 (not found)
cache.get(3);    // return 3
cache.get(4);    // return 4
ุงูุฅุฎุฑุงุฌ:
1
-1
-1
3
4
ุงูุดุฑุญ:
ุงูุฐุงูุฑุฉ ุงููุคูุชุฉ LRU Cache ุชููู ุจุฅุฒุงูุฉ ุงูุนูุตุฑ ุงูุฃูู ุงุณุชุฎุฏุงูุงู ุนูุฏ ุงูุญุงุฌุฉ ูุฅุถุงูุฉ ุนูุตุฑ ุฌุฏูุฏ.
ุงููุต ุงููุณุงุนุฏ:
class LRUCache {
  constructor(capacity) {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
  get(key) {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
  put(key, value) {
    // ุงูุชุจ ุงูููุฏ ููุง
  }
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
ุนูููุงุช: ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"], ููู: [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
ุงููุฎุฑุฌุงุช (Outputs):
[null, null, null, 1, null, -1, null, -1, 3, 4]

---
## ูุดุงูู ุงูุจุญุซ ูู ุงูุญู (Search / Decision Problems)

### ุชุญุฏู 1: ุงูุชุญูู ูู ูุฌูุฏ ูุณุงุฑ ูู ูุตูููุฉ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ (ุดุจูุฉ) ุชุญุชูู ุนูู ุฃุตูุงุฑ ููุงุญุฏุงุช. ุงูุตูุฑ ููุซู ูุณุงุฑูุง ูููู ุงูุนุจูุฑ ูููุ ูุงููุงุญุฏ ููุซู ุนุงุฆููุง. ูููุชู ูู ุชุญุฏูุฏ ูุง ุฅุฐุง ูุงู ููุงู ูุณุงุฑ ูู ุงูุฒุงููุฉ ุงูุนูููุฉ ุงููุณุฑู (0, 0) ุฅูู ุงูุฒุงููุฉ ุงูุณูููุฉ ุงููููู (n-1, m-1) ุฃู ูุง. ููููู ุงูุชุญุฑู ูู ุฃุฑุจุนุฉ ุงุชุฌุงูุงุช: ุฃุนููุ ุฃุณููุ ููููุ ูุณุงุฑ.
ุงููุซุงู:
ุงููุฏุฎู:
grid = [
  [0, 0, 1],
  [1, 0, 1],
  [0, 0, 0]
]
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ููุฌุฏ ูุณุงุฑ ูู (0, 0) ุฅูู (2, 2).
ุงููุต ุงููุณุงุนุฏ:
function hasPath(grid) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
grid = [[0, 0, 1], [1, 0, 1], [0, 0, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
grid = [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
true

---
### ุชุญุฏู 2: ุงูุจุญุซ ุนู ุงูุญู ุงูุฃูุซู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ ุชุญุชูู ุนูู ุฃุฑูุงู ุตุญูุญุฉ ููุฌุจุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุฃูุตุฑ ูุณุงุฑ ูู ุงูุฒุงููุฉ ุงูุนูููุฉ ุงููุณุฑู ุฅูู ุงูุฒุงููุฉ ุงูุณูููุฉ ุงูููููุ ุจุญูุซ ูููู ูุฌููุน ุงูุฃุฑูุงู ูู ุงููุณุงุฑ ูู ุงูุฃุตุบุฑ. ููููู ุงูุชุญุฑู ููุท ูููููู ุฃู ููุฃุณูู.
ุงููุซุงู:
ุงููุฏุฎู:
grid = [
  [1, 3, 1],
  [1, 5, 1],
  [4, 2, 1]
]
ุงูุฅุฎุฑุงุฌ:
7
ุงูุดุฑุญ:
ุฃูุตุฑ ูุณุงุฑ ูู 1 -> 3 -> 1 -> 1 -> 1ุ ูุฌููุน ุงูุฃุฑูุงู ูู 7.
ุงููุต ุงููุณุงุนุฏ:
function minPathSum(grid) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]
ุงููุฎุฑุฌุงุช (Outputs):
7
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1, 2, 3], [4, 5, 6]]
ุงููุฎุฑุฌุงุช (Outputs):
12
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1]]
ุงููุฎุฑุฌุงุช (Outputs):
1

---
### ุชุญุฏู 3: ุงูุชุญูู ูู ูุฌูุฏ ูุณุงุฑ ุจุทูู ูุนูู
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ ุชุญุชูู ุนูู ุฃุฑูุงู ุตุญูุญุฉุ ูุนุฏุฏ ุตุญูุญ K. ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงู ููุงู ูุณุงุฑ ูู ุงูุฒุงููุฉ ุงูุนูููุฉ ุงููุณุฑู ุฅูู ุงูุฒุงููุฉ ุงูุณูููุฉ ุงููููู ุจุญูุซ ูููู ูุฌููุน ุงูุฃุฑูุงู ูู ุงููุณุงุฑ ูุณุงูู K. ููููู ุงูุชุญุฑู ููุท ูููููู ุฃู ููุฃุณูู.
ุงููุซุงู:
ุงููุฏุฎู:
grid = [
  [1, 2],
  [3, 4]
]
K = 8
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุงููุณุงุฑ 1 -> 2 -> 4 ูุฌููุนู 7ุ ุงููุณุงุฑ 1 -> 3 -> 4 ูุฌููุนู 8.
ุงููุต ุงููุณุงุนุฏ:
function hasPathWithSum(grid, k) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1, 2], [3, 4]], K = 8
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1, 2], [3, 4]], K = 7
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
grid = [[1, 2], [3, 4]], K = 6
ุงููุฎุฑุฌุงุช (Outputs):
false

---
## ูุดุงูู ุงูุชุญุณูู Optimization Problems

### ุชุญุฏู 1: ุฃูุจุฑ ูุฌููุน ุฌุฒุฆู ูุชูุงุตู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ูู ุงูุฃุฑูุงู ุงูุตุญูุญุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุฃูุจุฑ ูุฌููุน ูููู ุงูุญุตูู ุนููู ูู ุณูุณูุฉ ุฌุฒุฆูุฉ (subarray) ูุชูุงุตูุฉ ูุงุญุฏุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
ุงูุฅุฎุฑุงุฌ:
6
ุงูุดุฑุญ:
ุฃูุจุฑ ูุฌููุน ูู 6 ูู ุงูุณูุณูุฉ ุงูุฌุฒุฆูุฉ [4, -1, 2, 1].
ุงููุต ุงููุณุงุนุฏ:
function maxSubArray(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
ุงููุฎุฑุฌุงุช (Outputs):
6
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [1]
ุงููุฎุฑุฌุงุช (Outputs):
1
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [5, 4, -1, 7, 8]
ุงููุฎุฑุฌุงุช (Outputs):
23

---
### ุชุญุฏู 2: ุชุณูู ุงูุฃุบุฑุงุถ
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูุฏูู ูุงุฆูุฉ ูู ุงูุฃุบุฑุงุถุ ูู ุบุฑุถ ูู ูุฒู ููููุฉ. ูุฏูู ุฃูุถูุง ุญููุจุฉ ุจูุฒู ุฃูุตู ูููู ุฃู ุชุญููู. ูููุชู ูู ุงุฎุชูุงุฑ ุงูุฃุบุฑุงุถ ุงูุชู ุชุถุนูุง ูู ุงูุญููุจุฉ ูุฒูุงุฏุฉ ุงููููุฉ ุงูุฅุฌูุงููุฉ ุฅูู ุฃูุตู ุญุฏ ูููู. ููููู ุชูุณูู ุงูุฃุบุฑุงุถ (ูุดููุฉ Knapsack ุงููุณุฑูุฉ).
ุงููุซุงู:
ุงููุฏุฎู:
items = [
  {weight: 10, value: 60},
  {weight: 20, value: 100},
  {weight: 30, value: 120}
]
capacity = 50
ุงูุฅุฎุฑุงุฌ:
240
ุงูุดุฑุญ:
ูููู ุฃุฎุฐ ุงูุนูุตุฑ 10 ุจุงููุงูู (ูููุฉ 60)ุ ูุงูุนูุตุฑ 20 ุจุงููุงูู (ูููุฉ 100)ุ ู 20/30 ูู ุงูุนูุตุฑ ุงูุฃุฎูุฑ (ูููุฉ (20/30) * 120 = 80)ุ ุงููุฌููุน 60 + 100 + 80 = 240.
ุงููุต ุงููุณุงุนุฏ:
function fractionalKnapsack(items, capacity) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
items = [{weight: 10, value: 60}, {weight: 20, value: 100}, {weight: 30, value: 120}], capacity = 50
ุงููุฎุฑุฌุงุช (Outputs):
240
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
items = [{weight: 1, value: 10}, {weight: 2, value: 20}, {weight: 3, value: 30}], capacity = 3
ุงููุฎุฑุฌุงุช (Outputs):
30
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
items = [{weight: 10, value: 10}, {weight: 10, value: 10}, {weight: 10, value: 10}], capacity = 25
ุงููุฎุฑุฌุงุช (Outputs):
25

---
### ุชุญุฏู 3: ูุดููุฉ ุงูุจุงุฆุน ุงููุชุฌูู (Traveling Salesman Problem)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงููุฏู (ููุงุท) ููุตูููุฉ ูุณุงูุงุช ุจูู ูู ุฒูุฌ ูู ุงููุฏู. ูููุชู ูู ุฅูุฌุงุฏ ุฃูุตุฑ ูุณุงุฑ ูุจุฏุฃ ูู ูุฏููุฉ ูุนููุฉ ููุฒูุฑ ูู ูุฏููุฉ ุฃุฎุฑู ูุฑุฉ ูุงุญุฏุฉ ุจุงูุถุจุท ุซู ูุนูุฏ ุฅูู ุงููุฏููุฉ ุงูุฃุตููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
distances = [
  [0, 10, 15, 20],
  [10, 0, 35, 25],
  [15, 35, 0, 30],
  [20, 25, 30, 0]
]
ุงูุฅุฎุฑุงุฌ:
80
ุงูุดุฑุญ:
ุฃูุตุฑ ูุณุงุฑ ูู 0 -> 1 -> 3 -> 2 -> 0ุ ุงููุณุงูุฉ 10 + 25 + 30 + 15 = 80.
ุงููุต ุงููุณุงุนุฏ:
function travelingSalesman(distances) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
distances = [[0, 10, 15], [10, 0, 20], [15, 20, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
45
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
distances = [[0, 2, 9, 10], [1, 0, 6, 4], [15, 7, 0, 8], [6, 3, 12, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
21
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
distances = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
3

---
## ูุดุงูู ุงูุชุฑุชูุจ ุฃู ุงูุชุตููู ุงูุฎุงุตุฉ (Special Ordering / Structuring)

### ุชุญุฏู 1: ุชุฑุชูุจ ุงูุฃุฑูุงู ุงูููุฌุจุฉ ูุงูุณุงูุจุฉ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุตูููุฉ ูู ุงูุฃุฑูุงู ุงูุตุญูุญุฉ ุงูุชู ุชุญุชูู ุนูู ุฃุฑูุงู ููุฌุจุฉ ูุณุงูุจุฉ ูุตูุฑ. ูููุชู ูู ุชุฑุชูุจ ุงูุฃุฑูุงู ูู ุงููุตูููุฉ ุจุญูุซ ุชุธูุฑ ุฌููุน ุงูุฃุฑูุงู ุงูุณุงูุจุฉ ุฃููุงูุ ุซู ุงูุฃุตูุงุฑุ ูุฃุฎูุฑูุง ุงูุฃุฑูุงู ุงูููุฌุจุฉ. ูุฌุจ ุฃู ูุชู ุงูุญู ูู ููุงูู (in-place) ุฏูู ุงุณุชุฎุฏุงู ูุตูููุฉ ุฅุถุงููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [-5, 1, -2, 0, 3, 0, -1]
ุงูุฅุฎุฑุงุฌ:
[-5, -2, -1, 0, 0, 1, 3]
ุงูุดุฑุญ:
ูุชู ุชุฑุชูุจ ุงูุฃุฑูุงู ุจุญูุซ ุชุณุจู ุงูุณูุงูุจ ุงูุฃุตูุงุฑ ุงูุชู ุจุฏูุฑูุง ุชุณุจู ุงูููุฌุจุฉ.
ุงููุต ุงููุณุงุนุฏ:
function sortNumbers(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [-5, 1, -2, 0, 3, 0, -1]
ุงููุฎุฑุฌุงุช (Outputs):
[-5, -2, -1, 0, 0, 1, 3]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, -1, -2, -3]
ุงููุฎุฑุฌุงุช (Outputs):
[-1, -2, -3, 1, 2, 3] (ุงูุชุฑุชูุจ ุงูุฏุงุฎูู ูููู ุฃู ูุฎุชูู)
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [0, 0, 0]
ุงููุฎุฑุฌุงุช (Outputs):
[0, 0, 0]

---
### ุชุญุฏู 2: ุฅุนุงุฏุฉ ุชุฑุชูุจ ูุงุฆูุฉ ุงูุฑูุงุจุท
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุงุฆูุฉ ุฑูุงุจุท (Linked List). ูููุชู ูู ุฅุนุงุฏุฉ ุชุฑุชูุจูุง ุจุญูุซ ุชููู ุงูุนูุฏ ุจุงูุชุฑุชูุจ: ุงูุนูุฏุฉ ุงูุฃูููุ ุงูุฃุฎูุฑุฉุ ุงูุซุงููุฉุ ูุง ูุจู ุงูุฃุฎูุฑุฉุ ูููุฐุง.
ุงููุซุงู:
ุงููุฏุฎู:
head = 1 -> 2 -> 3 -> 4
ุงูุฅุฎุฑุงุฌ:
1 -> 4 -> 2 -> 3
ุงูุดุฑุญ:
ูุชู ุฃุฎุฐ ุงูุนูุฏุฉ ุงูุฃููู (1)ุ ุซู ุงูุฃุฎูุฑุฉ (4)ุ ุซู ุงูุซุงููุฉ (2)ุ ุซู ูุง ูุจู ุงูุฃุฎูุฑุฉ (3).
ุงููุต ุงููุณุงุนุฏ:
function reorderList(head) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
head = 1 -> 2 -> 3 -> 4
ุงููุฎุฑุฌุงุช (Outputs):
1 -> 4 -> 2 -> 3
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
head = 1 -> 2 -> 3 -> 4 -> 5
ุงููุฎุฑุฌุงุช (Outputs):
1 -> 5 -> 2 -> 4 -> 3
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
head = 1
ุงููุฎุฑุฌุงุช (Outputs):
1

---
### ุชุญุฏู 3: ุชุฑุชูุจ ุญุณุจ ุงูุชูุงุซู
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุงุฆูุฉ ูู ุงููููุงุช. ูููุชู ูู ุชุฑุชูุจ ูุฐู ุงููููุงุช ุจุญูุซ ุชููู ุงููููุงุช ุงูุชู ูู ุนุจุงุฑุฉ ุนู "ุชูุงุซู" (anagrams) ูุจุนุถูุง ุงูุจุนุถ ูุฌูุนุฉ ูุนูุง. ุงููููุชุงู ูุชูุงุซูุชุงู ุฅุฐุง ูุงูุชุง ุชุญุชููุงู ุนูู ููุณ ุงูุญุฑูู ุจููุณ ุงูุนุฏุฏุ ุจุบุถ ุงููุธุฑ ุนู ุงูุชุฑุชูุจ.
ุงููุซุงู:
ุงููุฏุฎู:
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
ุงูุฅุฎุฑุงุฌ:
[
  ["ate", "eat", "tea"],
  ["nat", "tan"],
  ["bat"]
]
ุงูุดุฑุญ:
ุงููููุงุช "eat", "tea", "ate" ูู ุชูุงุซูุงุช ูุจุนุถูุง ุงูุจุนุถุ ููุฐูู "tan", "nat".
ุงููุต ุงููุณุงุนุฏ:
function groupAnagrams(strs) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
ุงููุฎุฑุฌุงุช (Outputs):
[["ate", "eat", "tea"], ["nat", "tan"], ["bat"]]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
strs = ["a"]
ุงููุฎุฑุฌุงุช (Outputs):
[["a"]]
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
strs = ["", "b", ""]
ุงููุฎุฑุฌุงุช (Outputs):
[["", ""], ["b"]]

---
## ูุดุงูู ุงูููุช ูุงูุชุงุฑูุฎ (Date & Time Problems)

### ุชุญุฏู 1: ุญุณุงุจ ุงููุฑู ุจูู ุชุงุฑูุฎูู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุชุงุฑูุฎูู. ูููุชู ูู ุญุณุงุจ ุนุฏุฏ ุงูุฃูุงู ุงููุงููุฉ ุจููููุง.
ุงููุซุงู:
ุงููุฏุฎู:
date1 = "2023-01-01"
date2 = "2023-01-10"
ุงูุฅุฎุฑุงุฌ:
9
ุงูุดุฑุญ:
ุงููุฑู ุจูู ุงูุชุงุฑูุฎูู ูู 9 ุฃูุงู.
ุงููุต ุงููุณุงุนุฏ:
function daysBetweenDates(date1, date2) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01", date2 = "2023-01-10"
ุงููุฎุฑุฌุงุช (Outputs):
9
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01", date2 = "2023-02-01"
ุงููุฎุฑุฌุงุช (Outputs):
31
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01", date2 = "2023-01-01"
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 2: ุฅูุฌุงุฏ ุงูููู ุงูุฐู ููุน ููู ุชุงุฑูุฎ ูุนูู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุชุงุฑูุฎูุง ูุนูููุง (ูููุ ุดูุฑุ ุณูุฉ). ูููุชู ูู ุฅูุฌุงุฏ ุงูููู ุงูุฐู ููุน ููู ูุฐุง ุงูุชุงุฑูุฎ (ูุซู ุงูุงุซูููุ ุงูุซูุงุซุงุกุ ุฅูุฎ).
ุงููุซุงู:
ุงููุฏุฎู:
day = 31, month = 8, year = 2023
ุงูุฅุฎุฑุงุฌ:
"Thursday"
ุงูุดุฑุญ:
31 ุฃุบุณุทุณ 2023 ูู ููู ุงูุฎููุณ.
ุงููุต ุงููุณุงุนุฏ:
function dayOfTheWeek(day, month, year) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
day = 31, month = 8, year = 2023
ุงููุฎุฑุฌุงุช (Outputs):
"Thursday"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
day = 1, month = 1, year = 2000
ุงููุฎุฑุฌุงุช (Outputs):
"Saturday"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
day = 14, month = 10, year = 2022
ุงููุฎุฑุฌุงุช (Outputs):
"Friday"

---
### ุชุญุฏู 3: ุญุณุงุจ ุงููุฑู ุจูู ุชูููุชูู ุนุงููููู
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุชุงุฑูุฎูู ูู ุชูููุชูู ูุฎุชูููู (UTC). ูููุชู ูู ุญุณุงุจ ุงููุฑู ุงูุฒููู ุจููููุง ุจุงูุฏูุงุฆู.
ุงููุซุงู:
ุงููุฏุฎู:
date1 = "2023-01-01T10:00:00Z"
date2 = "2023-01-01T12:30:00+03:00"
ุงูุฅุฎุฑุงุฌ:
90
ุงูุดุฑุญ:
ุงูุชุงุฑูุฎ ุงูุฃูู ูู 10:00 ุจุงูุชูููุช ุงูุนุงููู ุงูููุณู (UTC).
ุงูุชุงุฑูุฎ ุงูุซุงูู ูู 12:30 ุจุชูููุช +3 ุณุงุนุงุช.
ูุชุญูููู ุฅูู UTCุ ูุทุฑุญ 3 ุณุงุนุงุช ููุตุจุญ 9:30.
ุงููุฑู ุจูู 10:00 ู 9:30 ูู 30 ุฏูููุฉ.
ูุงุ ููุงู ุฎุทุฃ ูู ุงููุซุงู.
ูุซุงู ุตุญูุญ:
ุงููุฏุฎู:
date1 = "2023-01-01T10:00:00Z"
date2 = "2023-01-01T11:30:00Z"
ุงูุฅุฎุฑุงุฌ:
90
ุงูุดุฑุญ:
ุงููุฑู ุจูู 10:00 ู 11:30 ูู 90 ุฏูููุฉ.
ูุซุงู ุขุฎุฑ:
ุงููุฏุฎู:
date1 = "2023-01-01T10:00:00Z"
date2 = "2023-01-01T12:30:00+02:00"
ุงูุฅุฎุฑุงุฌ:
30
ุงูุดุฑุญ:
ุงูุชุงุฑูุฎ ุงูุฃูู ูู 10:00 UTC.
ุงูุชุงุฑูุฎ ุงูุซุงูู 12:30 ุจุชูููุช +2. ูู UTC ูุตุจุญ 12:30 - 2:00 = 10:30.
ุงููุฑู ุจูู 10:00 ู 10:30 ูู 30 ุฏูููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function timeDifferenceInMinutes(date1, date2) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01T10:00:00Z", date2 = "2023-01-01T11:30:00Z"
ุงููุฎุฑุฌุงุช (Outputs):
90
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01T10:00:00Z", date2 = "2023-01-01T09:30:00Z"
ุงููุฎุฑุฌุงุช (Outputs):
30
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
date1 = "2023-01-01T10:00:00Z", date2 = "2023-01-01T12:30:00+02:00"
ุงููุฎุฑุฌุงุช (Outputs):
30

---
## ูุดุงูู ุงูุฃุนุฏุงุฏ ุงููุจูุฑุฉ (Big Number Problems)

### ุชุญุฏู 1: ุฌูุน ุนุฏุฏูู ูุจูุฑูู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุนุฏุฏูู ูุจูุฑูู ุฌุฏูุง ููุซููู ูุณูุงุณู ูุตูุฉ. ูููุชู ูู ุญุณุงุจ ูุฌููุน ูุฐูู ุงูุนุฏุฏูู ูุฅุฑุฌุงุนู ูุณูุณูุฉ ูุตูุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
num1 = "123"
num2 = "456"
ุงูุฅุฎุฑุงุฌ:
"579"
ุงูุดุฑุญ:
ูุชู ุฌูุน ุงูุนุฏุฏูู ููุง ูู ูุงูุง ุฃุฑูุงููุง ุนุงุฏูุฉ ูููู ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ ุงูุฌูุน ุงููุฏูู.
ุงููุต ุงููุณุงุนุฏ:
function addBigNumbers(num1, num2) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
num1 = "123", num2 = "456"
ุงููุฎุฑุฌุงุช (Outputs):
"579"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
num1 = "999", num2 = "1"
ุงููุฎุฑุฌุงุช (Outputs):
"1000"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
num1 = "0", num2 = "0"
ุงููุฎุฑุฌุงุช (Outputs):
"0"

---
### ุชุญุฏู 2: ุถุฑุจ ุนุฏุฏูู ูุจูุฑูู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุนุฏุฏูู ูุจูุฑูู ุฌุฏูุง ููุซููู ูุณูุงุณู ูุตูุฉ. ูููุชู ูู ุญุณุงุจ ุญุงุตู ุถุฑุจ ูุฐูู ุงูุนุฏุฏูู ูุฅุฑุฌุงุนู ูุณูุณูุฉ ูุตูุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
num1 = "123"
num2 = "45"
ุงูุฅุฎุฑุงุฌ:
"5535"
ุงูุดุฑุญ:
ูุชู ุถุฑุจ ุงูุนุฏุฏูู ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ ุงูุถุฑุจ ุงููุฏูู.
ุงููุต ุงููุณุงุนุฏ:
function multiplyBigNumbers(num1, num2) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
num1 = "2", num2 = "3"
ุงููุฎุฑุฌุงุช (Outputs):
"6"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
num1 = "123", num2 = "45"
ุงููุฎุฑุฌุงุช (Outputs):
"5535"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
num1 = "99", num2 = "99"
ุงููุฎุฑุฌุงุช (Outputs):
"9801"

---
### ุชุญุฏู 3: ุญุณุงุจ ุงูุฌุฐุฑ ุงูุชุฑุจูุนู ูุนุฏุฏ ูุจูุฑ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุนุฏุฏูุง ูุจูุฑูุง ุฌุฏูุง ููุซูุงู ูุณูุณูุฉ ูุตูุฉ. ูููุชู ูู ุญุณุงุจ ุงูุฌุฐุฑ ุงูุชุฑุจูุนู ุงูุตุญูุญ (integer square root) ููุฐุง ุงูุนุฏุฏ.
ุงููุซุงู:
ุงููุฏุฎู:
n = "49"
ุงูุฅุฎุฑุงุฌ:
"7"
ุงูุดุฑุญ:
ุงูุฌุฐุฑ ุงูุชุฑุจูุนู ุงูุตุญูุญ ูู 49 ูู 7.
ุงููุต ุงููุณุงุนุฏ:
function sqrtBigNumber(n) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
n = "4"
ุงููุฎุฑุฌุงุช (Outputs):
"2"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
n = "81"
ุงููุฎุฑุฌุงุช (Outputs):
"9"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
n = "1000000000000000000"
ุงููุฎุฑุฌุงุช (Outputs):
"1000000000"

---
## ูุดุงูู ุงููุญุงูุงุฉ (Simulation Problems)

### ุชุญุฏู 1: ูุญุงูุงุฉ ูุนุจุฉ ุงูุญุจุงุฑ (Squid Game)
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูู ูุนุจุฉ ุงูุถูุก ุงูุฃุญูุฑ ูุงูุถูุก ุงูุฃุฎุถุฑุ ูุชุญุฑู ุงููุงุนุจูู ููุท ุนูุฏูุง ูููู ุงูุถูุก ุฃุฎุถุฑ. ุนูุฏูุง ูุชุญูู ุฅูู ุฃุญูุฑุ ูุฌุจ ุนูู ุงููุงุนุจูู ุงูุชููู ููุฑูุง. ุฅุฐุง ุชุญุฑู ูุงุนุจ ุฃุซูุงุก ุงูุถูุก ุงูุฃุญูุฑุ ูุชู ุฅูุตุงุคู. ุฃุนุทูุชู ูุงุฆูุฉ ุจูุฑุงุฑุงุช ุงููุงุนุจูู (ุชุญุฑู ุฃู ุชููู) ูู ูู ุฏูุฑุฉ. ูููุชู ูู ุญุณุงุจ ุนุฏุฏ ุงููุงุนุจูู ุงูุฐูู ุชู ุฅูุตุงุคูู.
ุงููุซุงู:
ุงููุฏุฎู:
moves = ["Green", "Move", "Red", "Move", "Green", "Stop", "Red", "Stop"]
ุงูุฅุฎุฑุงุฌ:
1
ุงูุดุฑุญ:
ุงููุงุนุจ ุงูุฃูู ุชุญุฑู ูู ุงูุถูุก ุงูุฃุฎุถุฑุ ุซู ุชุญุฑู ูู ุงูุถูุก ุงูุฃุญูุฑ ูุชู ุฅูุตุงุคู.
ุงููุต ุงููุณุงุนุฏ:
function squidGame(moves) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
moves = ["Green", "Move", "Red", "Move", "Green", "Stop", "Red", "Stop"]
ุงููุฎุฑุฌุงุช (Outputs):
1
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
moves = ["Green", "Move", "Red", "Stop", "Green", "Move"]
ุงููุฎุฑุฌุงุช (Outputs):
0
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
moves = ["Red", "Move"]
ุงููุฎุฑุฌุงุช (Outputs):
1

---
### ุชุญุฏู 2: ูุญุงูุงุฉ ูุธุงู ุงููุตุนุฏ
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุธุงู ูุตุนุฏ ุจุณูุท. ุงููุตุนุฏ ูุจุฏุฃ ูู ุงูุทุงุจู 0. ุฃุนุทูุชู ูุงุฆูุฉ ุจุทูุจุงุช ุงูุตุนูุฏุ ูู ุทูุจ ูุญุฏุฏ ุงูุทุงุจู ุงูุญุงูู ูุงููุฌูุฉ. ูุฌุจ ุฃู ูููู ุงููุตุนุฏ ุจุงูุชุญุฑู ุตุนูุฏูุง ุฃู ูุจูุทูุง ูุชูุจูุฉ ุงูุทูุจุงุช ุจุงูุชุฑุชูุจ ุงูุฐู ูุชู ููู ุงููุตูู ุฅูููุง. ุงุญุณุจ ุฅุฌูุงูู ุนุฏุฏ ุงูุทูุงุจู ุงูุชู ููุทุนูุง ุงููุตุนุฏ.
ุงููุซุงู:
ุงููุฏุฎู:
requests = [[0, 2], [3, 1], [2, 5]]
ุงูุฅุฎุฑุงุฌ:
9
ุงูุดุฑุญ:
1. ุงููุตุนุฏ ูู 0. ุทูุจ [0, 2]. ูุชุญุฑู ุฅูู 2 (2 ุทุงุจู).
2. ุงููุตุนุฏ ูู 2. ุทูุจ [3, 1]. ูุชุญุฑู ุฅูู 3 (1 ุทุงุจู)ุ ุซู ุฅูู 1 (2 ุทุงุจู).
3. ุงููุตุนุฏ ูู 1. ุทูุจ [2, 5]. ูุชุญุฑู ุฅูู 2 (1 ุทุงุจู)ุ ุซู ุฅูู 5 (3 ุทุงุจู).
ุฅุฌูุงูู ุงูุทูุงุจู ุงูููุทูุนุฉ: 2 + 1 + 2 + 1 + 3 = 9.
ุงููุต ุงููุณุงุนุฏ:
function simulateElevator(requests) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
requests = [[0, 2], [3, 1], [2, 5]]
ุงููุฎุฑุฌุงุช (Outputs):
9
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
requests = [[1, 5], [5, 1]]
ุงููุฎุฑุฌุงุช (Outputs):
8
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
requests = [[0, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 3: ูุญุงูุงุฉ ูุนุจุฉ ุงูุญูุงุฉ (Game of Life)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎุทูุฉ ูุงุญุฏุฉ ูู ูุนุจุฉ ุงูุญูุงุฉ (Conway's Game of Life) ุนูู ุดุจูุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ. ุงููุนุจุฉ ุชุชุจุน ุงูููุงุนุฏ ุงูุชุงููุฉ:
1. ุฃู ุฎููุฉ ุญูุฉ (1) ูุฏููุง ุฃูู ูู ุฌุงุฑูู ุญููู ุชููุช (ุจุณุจุจ ููุต ุงูุณูุงู).
2. ุฃู ุฎููุฉ ุญูุฉ (1) ูุฏููุง 2 ุฃู 3 ุฌูุฑุงู ุฃุญูุงุก ุชุจูู ุญูุฉ.
3. ุฃู ุฎููุฉ ุญูุฉ (1) ูุฏููุง ุฃูุซุฑ ูู 3 ุฌูุฑุงู ุฃุญูุงุก ุชููุช (ุจุณุจุจ ุงูุงูุชุธุงุธ).
4. ุฃู ุฎููุฉ ููุชุฉ (0) ูุฏููุง 3 ุฌูุฑุงู ุฃุญูุงุก ููุท ุชุตุจุญ ุญูุฉ (ุจุณุจุจ ุงูุชูุงุซุฑ).
ุงููุซุงู:
ุงููุฏุฎู:
board = [
  [0, 1, 0],
  [0, 0, 1],
  [1, 1, 1],
  [0, 0, 0]
]
ุงูุฅุฎุฑุงุฌ:
[
  [0, 0, 0],
  [1, 0, 1],
  [0, 1, 1],
  [0, 1, 0]
]
ุงูุดุฑุญ:
ุชุชู ูุญุงูุงุฉ ุงููุนุจุฉ ููููุง ูููุงุนุฏูุงุ ููุชู ุชุญุฏูุซ ุญุงูุฉ ูู ุฎููุฉ ุจูุงุกู ุนูู ุฌูุฑุงููุง.
ุงููุต ุงููุณุงุนุฏ:
function gameOfLife(board) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
board = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
[[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
board = [[1, 1], [1, 0]]
ุงููุฎุฑุฌุงุช (Outputs):
[[1, 1], [1, 1]]
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
board = [[1, 0, 1], [0, 1, 0], [1, 0, 1]]
ุงููุฎุฑุฌุงุช (Outputs):
[[0, 1, 0], [1, 0, 1], [0, 1, 0]]

---
## ูุดุงูู ุงูุงุญุชูุงูุงุช ูุงูุฅุญุตุงุก (Probability & Statistics Problems)

### ุชุญุฏู 1: ุญุณุงุจ ุงููุชูุณุท ูุงููุณูุท
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุงุฆูุฉ ูู ุงูุฃุฑูุงู. ูููุชู ูู ุญุณุงุจ ูุชูุณุทูุง (Mean) ููุณูุทูุง (Median).
ุงููุซุงู:
ุงููุฏุฎู:
nums = [1, 2, 3, 4, 5]
ุงูุฅุฎุฑุงุฌ:
"Mean: 3, Median: 3"
ุงูุดุฑุญ:
ุงููุชูุณุท ูู ูุฌููุน ุงูุฃุฑูุงู ููุณูููุง ุนูู ุนุฏุฏูุงุ ูุงููุณูุท ูู ุงูุฑูู ุงูุฃูุณุท ุจุนุฏ ุชุฑุชูุจ ุงูุฃุฑูุงู.
ุงููุต ุงููุณุงุนุฏ:
function meanAndMedian(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, 4, 5]
ุงููุฎุฑุฌุงุช (Outputs):
"Mean: 3, Median: 3"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, 4]
ุงููุฎุฑุฌุงุช (Outputs):
"Mean: 2.5, Median: 2.5"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [5, 2, 8, 1, 9]
ุงููุฎุฑุฌุงุช (Outputs):
"Mean: 5, Median: 5"

---
### ุชุญุฏู 2: ุญุณุงุจ ุงูุงูุญุฑุงู ุงููุนูุงุฑู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุงุฆูุฉ ูู ุงูุฃุฑูุงู. ูููุชู ูู ุญุณุงุจ ุงูุงูุญุฑุงู ุงููุนูุงุฑู (Standard Deviation) ููุฐู ุงูุฃุฑูุงู.
ุงููุซุงู:
ุงููุฏุฎู:
nums = [1, 2, 3, 4, 5]
ุงูุฅุฎุฑุงุฌ:
1.4142135623730951
ุงูุดุฑุญ:
ุงูุงูุญุฑุงู ุงููุนูุงุฑู ูู ูููุงุณ ููุฏู ุชุดุชุช ูุฌููุนุฉ ูู ุงูุจูุงูุงุช ุญูู ูุชูุณุทูุง.
ุงููุต ุงููุณุงุนุฏ:
function standardDeviation(nums) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nums = [1, 2, 3, 4, 5]
ุงููุฎุฑุฌุงุช (Outputs):
1.4142135623730951
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nums = [10, 20, 30]
ุงููุฎุฑุฌุงุช (Outputs):
8.16496580927726
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nums = [5, 5, 5, 5]
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 3: ูุญุงูุงุฉ ุฑูู ุงููุฑุฏ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฑูู ูุฌููุนุฉ ูู ุงููุฑุฏุงุช (dice) ูุญุณุงุจ ุงุญุชูุงู ุงูุญุตูู ุนูู ูุฌููุน ูุนูู.
ุงููุซุงู:
ุงููุฏุฎู:
dice = 2
targetSum = 7
simulations = 100000
ุงูุฅุฎุฑุงุฌ:
0.16666666666666666
ุงูุดุฑุญ:
ุงุญุชูุงู ุงูุญุตูู ุนูู ูุฌููุน 7 ุนูุฏ ุฑูู ูุฑุฏูู ูู 6/36 = 1/6 = 0.1666...
ุงููุต ุงููุณุงุนุฏ:
function diceProbability(dice, targetSum, simulations) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
dice = 2, targetSum = 7, simulations = 100000
ุงููุฎุฑุฌุงุช (Outputs):
0.16666...
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
dice = 1, targetSum = 6, simulations = 100000
ุงููุฎุฑุฌุงุช (Outputs):
0.16666...
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
dice = 3, targetSum = 10, simulations = 100000
ุงููุฎุฑุฌุงุช (Outputs):
0.125...

---
## ูุดุงูู ุงูุชุดููุฑ ูุงูุฃูุงู (Cryptography & Security Problems)

### ุชุญุฏู 1: ุชุดููุฑ ูู ุงูุดูุฑุฉ (Caesar Cipher)
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ูุนุฏุฏูุง ุตุญูุญูุง (shift). ูููุชู ูู ุชุดููุฑ ุงูุณูุณูุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ ููุตุฑ (Caesar Cipher). ูุชู ุงูุชุดููุฑ ุนู ุทุฑูู ุฅุฒุงุญุฉ ูู ุญุฑู ุฃุจุฌุฏู ูู ุงููุต ุจูุณุงูุฉ ูุนููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
text = "ABC"
shift = 1
ุงูุฅุฎุฑุงุฌ:
"BCD"
ุงูุดุฑุญ:
ูุชู ุฅุฒุงุญุฉ ูู ุญุฑู ุจููุฏุงุฑ 1.
ุงููุต ุงููุณุงุนุฏ:
function caesarCipher(text, shift) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
text = "ABC", shift = 1
ุงููุฎุฑุฌุงุช (Outputs):
"BCD"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
text = "XYZ", shift = 3
ุงููุฎุฑุฌุงุช (Outputs):
"ABC"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
text = "Hello World", shift = 3
ุงููุฎุฑุฌุงุช (Outputs):
"Khoor Zruog"

---
### ุชุญุฏู 2: ุชุดููุฑ Vigenรจre Cipher
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ููููุฉ ููุชุงุญ. ูููุชู ูู ุชุดููุฑ ุงูุณูุณูุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ Vigenรจre. ูุฐู ุงูุฎูุงุฑุฒููุฉ ุชุณุชุฎุฏู ูููุฉ ููุชุงุญ ูุชุทุจูู ุฅุฒุงุญุงุช ูุฎุชููุฉ ุนูู ุงูุญุฑูู.
ุงููุซุงู:
ุงููุฏุฎู:
text = "ATTACKATDAWN"
key = "LEMON"
ุงูุฅุฎุฑุงุฌ:
"LXFOPVEFRNHR"
ุงูุดุฑุญ:
ูุชู ุชุทุจูู ุงูุฅุฒุงุญุฉ ููู ุญุฑู ุจุงุณุชุฎุฏุงู ุงูุญุฑู ุงูููุงุจู ูู ุงููููุฉ ุงูููุชุงุญ.
ุงููุต ุงููุณุงุนุฏ:
function vigenereCipher(text, key) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
text = "ATTACKATDAWN", key = "LEMON"
ุงููุฎุฑุฌุงุช (Outputs):
"LXFOPVEFRNHR"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
text = "HELLO", key = "KEY"
ุงููุฎุฑุฌุงุช (Outputs):
"RIJVS"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
text = "A", key = "Z"
ุงููุฎุฑุฌุงุช (Outputs):
"Z"

---
### ุชุญุฏู 3: ุงูุชุญูู ูู ุงูุชูููุน ุงูุฑููู
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุชุงุจุฉ ุฏุงูุฉ ููุชุญูู ูู ุตุญุฉ ุชูููุน ุฑููู ูุฑุณุงูุฉ ูุนููุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ RSA. ูุฌุจ ุฃู ุชุฃุฎุฐ ุงูุฏุงูุฉ ุงูุฑุณุงูุฉุ ุงูุชูููุนุ ูุงูููุชุงุญ ุงูุนุงู.
ุงููุซุงู:
ุงููุฏุฎู:
message = "Hello World"
signature = "..." // ุชูููุน ุฑููู
publicKey = {n: ..., e: ...}
ุงูุฅุฎุฑุงุฌ:
true / false
ุงูุดุฑุญ:
ูุชู ุงูุชุญูู ูู ุงูุชูููุน ุจุงุณุชุฎุฏุงู ุงูููุชุงุญ ุงูุนุงูุ ูุฅุฐุง ูุงู ุงูุชูููุน ุตุญูุญูุงุ ูุชู ุฅุฑุฌุงุน true.
ุงููุต ุงููุณุงุนุฏ:
function verifyRSASignature(message, signature, publicKey) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
message = "Hello World", signature = "...", publicKey = {n: ..., e: ...}
ุงููุฎุฑุฌุงุช (Outputs):
true
(ูุฌุจ ุฃู ูุชู ุชูููุฏ ุงูุชูููุน ูุงูููุชุงุญ ูุณุจููุง ููุงุฎุชุจุงุฑ)
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
message = "Hello World", signature = "wrong_signature", publicKey = {n: ..., e: ...}
ุงููุฎุฑุฌุงุช (Outputs):
false

---
## ูุดุงูู ุงูููุฏุณุฉ ุงูุญุณุงุจูุฉ (Computational Geometry)

### ุชุญุฏู 1: ุญุณุงุจ ุงููุณุงูุฉ ุจูู ููุทุชูู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฅุญุฏุงุซูุงุช ููุทุชูู ูู ูุธุงู ุงูุฅุญุฏุงุซูุงุช ุงูุฏููุงุฑุชู (x, y). ูููุชู ูู ุญุณุงุจ ุงููุณุงูุฉ ุงูุฅูููุฏูุฉ ุจููููุง.
ุงููุซุงู:
ุงููุฏุฎู:
p1 = {x: 3, y: 0}
p2 = {x: 0, y: 4}
ุงูุฅุฎุฑุงุฌ:
5
ุงูุดุฑุญ:
ุงููุณุงูุฉ ุจูู ุงูููุทุชูู ูู ุงูุฌุฐุฑ ุงูุชุฑุจูุนู ูู ((x2-x1)^2 + (y2-y1)^2).
ุงููุต ุงููุณุงุนุฏ:
function distanceBetweenPoints(p1, p2) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 3, y: 0}, p2 = {x: 0, y: 4}
ุงููุฎุฑุฌุงุช (Outputs):
5
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 0, y: 0}, p2 = {x: 1, y: 1}
ุงููุฎุฑุฌุงุช (Outputs):
1.4142135623730951
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 1, y: 1}, p2 = {x: 1, y: 1}
ุงููุฎุฑุฌุงุช (Outputs):
0

---
### ุชุญุฏู 2: ุงูุชุญูู ูู ุชูุงุทุน ุฎุทูู
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฅุญุฏุงุซูุงุช ููุทุชูู ุชูุซูุงู ุฎุทูุง ูุณุชููููุง ููู ุฎุท (P1, P2 ู P3, P4). ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงูุฎุทุงู ูุชูุงุทุนุงู ุฃู ูุง.
ุงููุซุงู:
ุงููุฏุฎู:
p1 = {x: 0, y: 0}, p2 = {x: 1, y: 1}
p3 = {x: 0, y: 1}, p4 = {x: 1, y: 0}
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุงูุฎุทุงู ูุชูุงุทุนุงู.
ุงููุต ุงููุณุงุนุฏ:
function doLinesIntersect(p1, p2, p3, p4) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 0, y: 0}, p2 = {x: 1, y: 1}, p3 = {x: 0, y: 1}, p4 = {x: 1, y: 0}
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 0, y: 0}, p2 = {x: 1, y: 1}, p3 = {x: 2, y: 2}, p4 = {x: 3, y: 3}
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
p1 = {x: 0, y: 0}, p2 = {x: 1, y: 1}, p3 = {x: 1, y: 0}, p4 = {x: 2, y: 1}
ุงููุฎุฑุฌุงุช (Outputs):
false

---
### ุชุญุฏู 3: ุฅูุฌุงุฏ ุงูุญุฏุจ ุงูุฃูู (Convex Hull)
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงูููุงุท ูู ูุณุชูู ุซูุงุฆู ุงูุฃุจุนุงุฏ. ูููุชู ูู ุฅูุฌุงุฏ ุงูุญุฏุจ ุงูุฃูู (Convex Hull) ููุฐู ุงูููุงุท. ุงูุญุฏุจ ุงูุฃูู ูู ุฃุตุบุฑ ูุถูุน ูุญุฏุจ ูุญูุท ุจุฌููุน ุงูููุงุท.
ุงููุซุงู:
ุงููุฏุฎู:
points = [
  {x: 0, y: 3}, {x: 2, y: 2}, {x: 1, y: 1},
  {x: 2, y: 1}, {x: 3, y: 0}, {x: 0, y: 0},
  {x: 3, y: 3}
]
ุงูุฅุฎุฑุงุฌ:
[{x: 0, y: 0}, {x: 3, y: 0}, {x: 3, y: 3}, {x: 0, y: 3}]
ุงูุดุฑุญ:
ูุชู ุฅุฑุฌุงุน ุฅุญุฏุงุซูุงุช ุงูููุงุท ุงูุชู ุชุดูู ุงูุญุฏุจ ุงูุฃูู.
ุงููุต ุงููุณุงุนุฏ:
function convexHull(points) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 0, y: 3}, {x: 2, y: 2}, {x: 1, y: 1}, {x: 2, y: 1}, {x: 3, y: 0}, {x: 0, y: 0}, {x: 3, y: 3}]
ุงููุฎุฑุฌุงุช (Outputs):
[{x: 0, y: 0}, {x: 3, y: 0}, {x: 3, y: 3}, {x: 0, y: 3}]
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}]
ุงููุฎุฑุฌุงุช (Outputs):
[{x: 1, y: 1}, {x: 3, y: 3}]

---
## ูุดุงูู ุงูุดุจูุงุช (Networking Problems)

### ุชุญุฏู 1: ุงูุชุญูู ูู ุนููุงู IP
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ. ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ูุฐู ุงูุณูุณูุฉ ุชูุซู ุนููุงู IP ุตุงูุญูุง (IPv4).
ุงููุซุงู:
ุงููุฏุฎู:
ip = "192.168.1.1"
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุงูุนููุงู ุตุงูุญ ูุฃูู ูุชููู ูู 4 ุฃุฌุฒุงุกุ ูู ุฌุฒุก ุจูู 0 ู 255.
ุงููุต ุงููุณุงุนุฏ:
function isValidIPv4(ip) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
ip = "192.168.1.1"
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
ip = "256.1.1.1"
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
ip = "1.1.1.1.1"
ุงููุฎุฑุฌุงุช (Outputs):
false

---
### ุชุญุฏู 2: ูู ุชุฑููุฒ URL
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ุชูุซู ุฌุฒุกูุง ูู ุฑุงุจุท URL. ูููุชู ูู ูู ุชุฑููุฒ ุงูุฃุญุฑู ุงูุฎุงุตุฉ ุงูุชู ุชู ุชุดููุฑูุง.
ุงููุซุงู:
ุงููุฏุฎู:
url = "hello%20world%21"
ุงูุฅุฎุฑุงุฌ:
"hello world!"
ุงูุดุฑุญ:
ูุชู ุงุณุชุจุฏุงู %20 ุจูุณุงูุฉ ู %21 ุจุนูุงูุฉ ุชุนุฌุจ.
ุงููุต ุงููุณุงุนุฏ:
function decodeUrl(url) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
url = "hello%20world%21"
ุงููุฎุฑุฌุงุช (Outputs):
"hello world!"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
url = "a%2bb%3d"
ุงููุฎุฑุฌุงุช (Outputs):
"a+b="
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
url = "http%3A%2F%2Fexample.com"
ุงููุฎุฑุฌุงุช (Outputs):
"http://example.com"

---
### ุชุญุฏู 3: ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุชูุฌูู
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุชูุฌูู ุจุณูุทุฉ (ูุซู Distance Vector Routing). ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงูููุฌูุงุช ูุงูุฌุฏุงูู ุงูุฎุงุตุฉ ุจูุง. ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุชุญุฏูุซ ุฌุฏุงูู ุงูุชูุฌูู ุจูุงุกู ุนูู ุงูุฌุฏุงูู ุงููุฌุงูุฑุฉ ุญุชู ุชุตู ุฅูู ุญุงูุฉ ุซุงุจุชุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
routingTables = {
  'A': {'B': 1, 'C': 5},
  'B': {'A': 1, 'C': 2, 'D': 3},
  'C': {'A': 5, 'B': 2, 'D': 1},
  'D': {'B': 3, 'C': 1}
}
ุงูุฅุฎุฑุงุฌ:
{
  'A': {'B': 1, 'C': 3, 'D': 4},
  'B': {'A': 1, 'C': 2, 'D': 3},
  'C': {'A': 3, 'B': 2, 'D': 1},
  'D': {'A': 4, 'B': 3, 'C': 1}
}
ุงูุดุฑุญ:
ูุชู ุชุญุฏูุซ ุงูุฌุฏุงูู ุญุชู ูุชู ุฅูุฌุงุฏ ุฃูุตุฑ ุงููุณุงุฑุงุช ูุฌููุน ุงูุนูุฏ.
ุงููุต ุงููุณุงุนุฏ:
function simulateRouting(routingTables) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
routingTables = {'A': {'B': 1, 'C': 5}, 'B': {'A': 1, 'C': 2, 'D': 3}, 'C': {'A': 5, 'B': 2, 'D': 1}, 'D': {'B': 3, 'C': 1}}
ุงููุฎุฑุฌุงุช (Outputs):
{'A': {'B': 1, 'C': 3, 'D': 4}, 'B': {'A': 1, 'C': 2, 'D': 3}, 'C': {'A': 3, 'B': 2, 'D': 1}, 'D': {'A': 4, 'B': 3, 'C': 1}}

---
# ๐ก ูุชูุฏูุฉ (Advanced / Specialized)

---
## ูุดุงูู ุงูุฃูุธูุฉ ุงูููุฒุนุฉ (Distributed Systems)

### ุชุญุฏู 1: ุฎูุงุฑุฒููุฉ ุงูุชุฎุงุจ ุงููุงุฆุฏ
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุงูุชุฎุงุจ ุงููุงุฆุฏ ูู ูุธุงู ุญููู (Ring Election Algorithm). ุฃุนุทูุชู ูุงุฆูุฉ ูู ุงูุนูุฏ ูู ุญููุฉ. ูุฌุจ ุนูู ูู ุนูุฏุฉ ุฃู ุชุฑุณู ุฑุณุงูุฉ ุฅูู ุงูุนูุฏุฉ ุงูุชุงููุฉุ ูุชุญุชูู ุงูุฑุณุงูุฉ ุนูู ูููุชูุง. ุงูุนูุฏุฉ ุงูุชู ูุฏููุง ุฃุนูู ูููุฉ ุชุตุจุญ ุงููุงุฆุฏ.
ุงููุซุงู:
ุงููุฏุฎู:
nodes = [3, 7, 1, 9]
ุงูุฅุฎุฑุงุฌ:
9
ุงูุดุฑุญ:
ุงูุนูุฏุฉ 9 ูู ุงูุฃูุจุฑุ ูุฐุง ุณุชุตุจุญ ุงููุงุฆุฏ.
ุงููุต ุงููุณุงุนุฏ:
function ringElection(nodes) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
nodes = [3, 7, 1, 9]
ุงููุฎุฑุฌุงุช (Outputs):
9
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
nodes = [10, 20, 5, 15]
ุงููุฎุฑุฌุงุช (Outputs):
20
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
nodes = [100]
ุงููุฎุฑุฌุงุช (Outputs):
100

---
### ุชุญุฏู 2: ุงูุชุดุงู Deadlock
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุงูุชุดุงู ุญุงูุฉ ุงูุฌููุฏ (Deadlock) ูู ูุธุงู. ุฃุนุทูุชู ูุงุฆูุฉ ูู ุงูุนูููุงุช ูุงูููุงุฑุฏ ุงูุชู ุชุทูุจูุง ูุชูุชูููุง. ูุฌุจ ุนููู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ููุงู ุญููุฉ ูู ุงูุงุนุชูุงุฏ ุงููุชุจุงุฏู.
ุงููุซุงู:
ุงููุฏุฎู:
requests = {
  'P1': ['R1'],
  'P2': ['R2'],
  'P3': ['R3']
}
holds = {
  'P1': ['R2'],
  'P2': ['R3'],
  'P3': ['R1']
}
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
P1 ููุชุธุฑ R2 ุงูุฐู ููููู P2. P2 ููุชุธุฑ R3 ุงูุฐู ููููู P3. P3 ููุชุธุฑ R1 ุงูุฐู ููููู P1. ูุฐู ุญููุฉ ูู ุงูุงุนุชูุงุฏ.
ุงููุต ุงููุณุงุนุฏ:
function detectDeadlock(requests, holds) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
requests = {'P1': ['R1'], 'P2': ['R2'], 'P3': ['R3']}, holds = {'P1': ['R2'], 'P2': ['R3'], 'P3': ['R1']}
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
requests = {'P1': ['R1'], 'P2': ['R2']}, holds = {'P1': ['R1'], 'P2': ['R2']}
ุงููุฎุฑุฌุงุช (Outputs):
false

---
### ุชุญุฏู 3: ูุญุงูุงุฉ Paxos
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ Paxos ุงูุฃุณุงุณูุฉ. ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงููุนุชูุฏูู (Acceptors)ุ ุงูููุชุฑุญูู (Proposers)ุ ูุงููุชุนูููู (Learners). ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจูุญุงูุงุฉ ุนูููุฉ ุงุชุฎุงุฐ ูุฑุงุฑ ูู ูุธุงู ููุฒุนุ ุจุญูุซ ูุชู ุงูุชูุงูู ุนูู ูููุฉ ูุงุญุฏุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
proposers = ['P1', 'P2']
acceptors = ['A1', 'A2', 'A3']
learners = ['L1']
proposals = {'P1': 'Value A', 'P2': 'Value B'}
ุงูุฅุฎุฑุงุฌ:
"Value A" (ุฃู "Value B" ุจูุงุกู ุนูู ุงููุชูุฌุฉ ุงูููุงุฆูุฉ)
ุงูุดุฑุญ:
ุฎูุงุฑุฒููุฉ Paxos ุชุถูู ุงูุชูุงูู ุนูู ูููุฉ ูุงุญุฏุฉ ุญุชู ูู ุญุงูุฉ ูุดู ุจุนุถ ุงูููููุงุช.
ุงููุต ุงููุณุงุนุฏ:
function simulatePaxos(proposers, acceptors, learners, proposals) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
proposers = ['P1', 'P2'], acceptors = ['A1', 'A2', 'A3'], learners = ['L1'], proposals = {'P1': 'Value A', 'P2': 'Value B'}
ุงููุฎุฑุฌุงุช (Outputs):
"Value A" (ูุฌุจ ุฃู ุชููู ุงููุชูุฌุฉ ุซุงุจุชุฉ ูุฃุบุฑุงุถ ุงูุงุฎุชุจุงุฑ)

---
## ูุดุงูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุงูุขูุฉ (AI / ML / RL)

### ุชุญุฏู 1: ุญุณุงุจ ุงูุงูุญุฏุงุฑ ุงูุฎุทู
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงูููุงุท (x, y). ูููุชู ูู ุญุณุงุจ ูุนุงุฏูุฉ ุงูุงูุญุฏุงุฑ ุงูุฎุทู (y = mx + b) ุงูุชู ุชูุงุณุจ ูุฐู ุงูููุงุท ุจุดูู ุฃูุถู. ูุฌุจ ุฃู ุชููู ุจุญุณุงุจ ูููุฉ m (ุงูููู) ููููุฉ b (ุงูุชูุงุทุน).
ุงููุซุงู:
ุงููุฏุฎู:
points = [{x: 1, y: 2}, {x: 2, y: 4}, {x: 3, y: 6}]
ุงูุฅุฎุฑุงุฌ:
{m: 2, b: 0}
ุงูุดุฑุญ:
ุงูุฎุท y = 2x + 0 ููุฑ ุจุฌููุน ุงูููุงุท.
ุงููุต ุงููุณุงุนุฏ:
function linearRegression(points) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 1, y: 2}, {x: 2, y: 4}, {x: 3, y: 6}]
ุงููุฎุฑุฌุงุช (Outputs):
{m: 2, b: 0}
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 1, y: 1}, {x: 2, y: 2}, {x: 3, y: 3}]
ุงููุฎุฑุฌุงุช (Outputs):
{m: 1, b: 0}
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 1, y: 1}, {x: 2, y: 3}, {x: 3, y: 2}]
ุงููุฎุฑุฌุงุช (Outputs):
{m: 0.5, b: 1}

---
### ุชุญุฏู 2: ุฎูุงุฑุฒููุฉ K-Means
ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ูุฌููุนุฉ ูู ุงูููุงุท ูู ูุณุชูู ุซูุงุฆู ุงูุฃุจุนุงุฏ ูุนุฏุฏ ุตุญูุญ K. ูููุชู ูู ุชุทุจูู ุฎูุงุฑุฒููุฉ K-Means ูุชุตููู ูุฐู ุงูููุงุท ุฅูู K ูู ุงูุนูุงููุฏ (Clusters).
ุงููุซุงู:
ุงููุฏุฎู:
points = [
  {x: 1, y: 1}, {x: 1, y: 2}, {x: 2, y: 1},
  {x: 5, y: 5}, {x: 5, y: 6}, {x: 6, y: 5}
]
k = 2
ุงูุฅุฎุฑุงุฌ:
[
  [{x: 1, y: 1}, {x: 1, y: 2}, {x: 2, y: 1}],
  [{x: 5, y: 5}, {x: 5, y: 6}, {x: 6, y: 5}]
]
ุงูุดุฑุญ:
ูุชู ุชุฌููุน ุงูููุงุท ุงููุชุดุงุจูุฉ ูู ุนูุงููุฏ.
ุงููุต ุงููุณุงุนุฏ:
function kmeans(points, k) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 1, y: 1}, {x: 1, y: 2}, {x: 2, y: 1}, {x: 5, y: 5}, {x: 5, y: 6}, {x: 6, y: 5}], k = 2
ุงููุฎุฑุฌุงุช (Outputs):
[[{x: 1, y: 1}, {x: 1, y: 2}, {x: 2, y: 1}], [{x: 5, y: 5}, {x: 5, y: 6}, {x: 6, y: 5}]]
(ุงููุชูุฌุฉ ุชุนุชูุฏ ุนูู ุงููุฑุงูุฒ ุงูุฃูููุฉ)
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
points = [{x: 0, y: 0}, {x: 10, y: 0}, {x: 0, y: 10}, {x: 10, y: 10}], k = 2
ุงููุฎุฑุฌุงุช (Outputs):
[[{x: 0, y: 0}, {x: 0, y: 10}], [{x: 10, y: 0}, {x: 10, y: 10}]]
(ุฃู ุฃู ุชูุณูู ููุทูู ุขุฎุฑ)

---
### ุชุญุฏู 3: ูุญุงูุงุฉ ุดุจูุฉ ุนุตุจูุฉ ุจุณูุทุฉ
ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุจูุงุก ููุญุงูุงุฉ ุดุจูุฉ ุนุตุจูุฉ ุจุณูุทุฉ ุชุชููู ูู ุทุจูุฉ ุฅุฏุฎุงูุ ุทุจูุฉ ูุฎููุฉุ ูุทุจูุฉ ุฅุฎุฑุงุฌ. ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุฅุฌุฑุงุก ุงูุชูุจุค (forward propagation) ุนูู ุจูุงูุงุช ุฅุฏุฎุงู ูุนููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
weights = {
  'input_to_hidden': [[0.1, 0.2], [0.3, 0.4]],
  'hidden_to_output': [[0.5], [0.6]]
}
biases = {
  'hidden': [0.1, 0.2],
  'output': [0.3]
}
input = [1, 2]
ุงูุฅุฎุฑุงุฌ:
[1.32628...]
ุงูุดุฑุญ:
ูุชู ุญุณุงุจ ูุงุชุฌ ูู ุทุจูุฉ ุจุงุณุชุฎุฏุงู ุงูุฃูุฒุงู ูุงูุชุญูุฒุงุช ูุฏุงูุฉ ุงูุชูุดูุท (ูุซู Sigmoid).
ุงููุต ุงููุณุงุนุฏ:
function simpleNeuralNetwork(weights, biases, input) {
  // ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
weights = {'input_to_hidden': [[0.1, 0.2], [0.3, 0.4]], 'hidden_to_output': [[0.5], [0.6]]}, biases = {'hidden': [0.1, 0.2], 'output': [0.3]}, input = [1, 2]
ุงููุฎุฑุฌุงุช (Outputs):
[1.32628...]
(ุงููุงุชุฌ ูุฏ ูุฎุชูู ููููุงู ุจูุงุกู ุนูู ุฏูุฉ ุงูุญุณุงุจ)

---
## ูุดุงูู ููุงุนุฏ ุงูุจูุงูุงุช (Database / SQL Problems)

### ุชุญุฏู 1: ุงุณุชุนูุงู ุจุณูุท (SELECT)
ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฌุฏูููุง ููุซู ุจูุงูุงุช ุงูููุธููู. ูููุชู ูู ูุชุงุจุฉ ุงุณุชุนูุงู SQL ูุฅุฑุฌุงุน ุฌููุน ุงูููุธููู ุงูุฐูู ุชุฒูุฏ ุฃุนูุงุฑูู ุนู 30.
ุงููุซุงู:
ุงููุฏุฎู:
Table: Employees
| id | name | age | department |
|----|------|-----|------------|
| 1  | Ali  | 25  | IT         |
| 2  | Sami | 35  | HR         |
| 3  | Ola  | 40  | IT         |
ุงูุฅุฎุฑุงุฌ:
| id | name | age | department |
|----|------|-----|------------|
| 2  | Sami | 35  | HR         |
| 3  | Ola  | 40  | IT         |
ุงูุดุฑุญ:
ูุชู ุงุณุชุฎุฏุงู ุฌููุฉ `WHERE` ูููุชุฑุฉ ุงูุจูุงูุงุช.
ุงููุต ุงููุณุงุนุฏ:
```sql
-- ุงูุชุจ ุงุณุชุนูุงู SQL ููุง
SELECT * FROM Employees WHERE ...
````

ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
Table: Employees
| id | name | age | department |
|----|------|-----|------------|
| 1  | Ali  | 25  | IT         |
| 2  | Sami | 35  | HR         |
| 3  | Ola  | 40  | IT         |
| 4  | Omar | 28  | Sales      |
ุงููุฎุฑุฌุงุช (Outputs):
| id | name | age | department |
|----|------|-----|------------|
| 2  | Sami | 35  | HR         |
| 3  | Ola  | 40  | IT         |

-----

### ุชุญุฏู 2: ุงุณุชุนูุงู ูุน join ู group by

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฌุฏูููู: `Employees` ู `Departments`. ูููุชู ูู ูุชุงุจุฉ ุงุณุชุนูุงู SQL ูุญุณุงุจ ุนุฏุฏ ุงูููุธููู ูู ูู ูุณู.
ุงููุซุงู:
ุงููุฏุฎู:
Table: Employees
| id | name | department\_id |
|----|------|---------------|
| 1  | Ali  | 10            |
| 2  | Sami | 20            |
| 3  | Ola  | 10            |

Table: Departments
| id | name |
|----|------|
| 10 | IT   |
| 20 | HR   |
ุงูุฅุฎุฑุงุฌ:
| department\_name | employee\_count |
|-----------------|----------------|
| IT              | 2              |
| HR              | 1              |
ุงูุดุฑุญ:
ูุชู ุงุณุชุฎุฏุงู `JOIN` ูุฑุจุท ุงูุฌุฏูููู ู `GROUP BY` ูุชุฌููุน ุงููุชุงุฆุฌ.
ุงููุต ุงููุณุงุนุฏ:

```sql
-- ุงูุชุจ ุงุณุชุนูุงู SQL ููุง
SELECT d.name AS department_name, COUNT(e.id) AS employee_count
FROM Employees e
JOIN Departments d ON e.department_id = d.id
...
```

ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
Table: Employees, Table: Departments
ุงููุฎุฑุฌุงุช (Outputs):
| department\_name | employee\_count |
|-----------------|----------------|
| IT              | 2              |
| HR              | 1              |
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
Table: Employees (with more data), Table: Departments
| id | name | department\_id |
|----|------|---------------|
| 1  | A    | 10            |
| 2  | B    | 10            |
| 3  | C    | 10            |
| 4  | D    | 20            |
| 5  | E    | 30            |
| 6  | F    | 30            |
| 7  | G    | 30            |
| 8  | H    | 30            |
| 9  | I    | 40            |
| 10 | J    | 50            |
ุงููุฎุฑุฌุงุช (Outputs):
| department\_name | employee\_count |
|-----------------|----------------|
| IT              | 3              |
| HR              | 1              |
| Sales           | 4              |
| Marketing       | 1              |
| Finance         | 1              |

-----

### ุชุญุฏู 3: ุงุณุชุนูุงู ูุนูุฏ ูุน subqueries

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุฌุฏูู `Employees` ูุญุชูู ุนูู ูุนูููุงุช ุงูููุธููู ูุฑุฆูุณูู. ูููุชู ูู ูุชุงุจุฉ ุงุณุชุนูุงู SQL ูุฅูุฌุงุฏ ุฌููุน ุงูููุธููู ุงูุฐูู ููุณุจูู ุฃูุซุฑ ูู ูุชูุณุท ุฑุงุชุจ ุฑุคุณุงุฆูู.
ุงููุซุงู:
ุงููุฏุฎู:
Table: Employees
| id | name | salary | manager\_id |
|----|------|--------|------------|
| 1  | Ali  | 5000   | 3          |
| 2  | Sami | 6000   | 3          |
| 3  | Ola  | 8000   | NULL       |
| 4  | Omar | 7000   | 5          |
| 5  | Sara | 6500   | 3          |
ุงูุฅุฎุฑุงุฌ:
| name |
|------|
| Omar |
ุงูุดุฑุญ:
ูุชูุณุท ุฑุงุชุจ ุฑุคุณุงุก ุฌููุน ุงูููุธููู ูู 8000. ุงูููุธู ุนูุฑ ูู ุงููุญูุฏ ุงูุฐู ุฑุงุชุจู 7000 ููู ุฃูู ูู ูุชูุณุท ุฑุงุชุจ ุฑุคุณุงุฆู.
ูุงุ ูุฐุง ุงููุซุงู ุฎุงุทุฆ.
ูุซุงู ุตุญูุญ:
ุงููุฏุฎู:
Table: Employees
| id | name | salary | manager\_id |
|----|------|--------|------------|
| 1  | Joe  | 70000  | 3          |
| 2  | Henry| 80000  | 4          |
| 3  | Sam  | 60000  | NULL       |
| 4  | Max  | 90000  | NULL       |
ุงูุฅุฎุฑุงุฌ:
| name |
|------|
| Joe  |
ุงูุดุฑุญ:
ุฑุงุชุจ Joe (70000) ุฃูุจุฑ ูู ุฑุงุชุจ ุฑุฆูุณู Sam (60000).
ุฑุงุชุจ Henry (80000) ุฃูู ูู ุฑุงุชุจ ุฑุฆูุณู Max (90000).
ุงููุต ุงููุณุงุนุฏ:

```sql
-- ุงูุชุจ ุงุณุชุนูุงู SQL ููุง
SELECT e1.name FROM Employees e1 JOIN Employees e2 ON e1.manager_id = e2.id WHERE ...
```

ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
Table: Employees
| id | name | salary | manager\_id |
|----|------|--------|------------|
| 1  | Joe  | 70000  | 3          |
| 2  | Henry| 80000  | 4          |
| 3  | Sam  | 60000  | NULL       |
| 4  | Max  | 90000  | NULL       |
ุงููุฎุฑุฌุงุช (Outputs):
| name |
|------|
| Joe  |

-----

## ูุดุงูู ุงูุฃูุธูุฉ ุงููุฏูุฌุฉ ู IoT (Embedded / IoT)

### ุชุญุฏู 1: ุชุญููู ูู ูุธุงู ุนุดุฑู ุฅูู ุซูุงุฆู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูู ุนุงูู ุงูุฃูุธูุฉ ุงููุฏูุฌุฉุ ุบุงูุจูุง ูุง ูุญุชุงุฌ ุฅูู ุงูุชุนุงูู ูุน ุงูุฃุฑูุงู ุนูู ูุณุชูู ุงูุจุชุงุช. ูููุชู ูู ูุชุงุจุฉ ุฏุงูุฉ ุชููู ุจุชุญููู ุฑูู ุนุดุฑู ุตุญูุญ ููุฌุจ ุฅูู ุชูุซููู ุงูุซูุงุฆู (Binary) ุนูู ุดูู ุณูุณูุฉ ูุตูุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
num = 10
ุงูุฅุฎุฑุงุฌ:
"1010"
ุงูุดุฑุญ:
ุงูุนุฏุฏ 10 ูู ุงููุธุงู ุงูุนุดุฑู ูู 1010 ูู ุงููุธุงู ุงูุซูุงุฆู.
ุงููุต ุงููุณุงุนุฏ:
function decimalToBinary(num) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
num = 10
ุงููุฎุฑุฌุงุช (Outputs):
"1010"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
num = 1
ุงููุฎุฑุฌุงุช (Outputs):
"1"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
num = 0
ุงููุฎุฑุฌุงุช (Outputs):
"0"

-----

### ุชุญุฏู 2: ูู ุชุฑููุฒ ุจูุงูุงุช ุงูุญุณุงุณ

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ุชูุซู ุจูุงูุงุช ูุฏูุฌุฉ ูู ุญุณุงุณ (sensor). ุงูุจูุงูุงุช ูุฏูุฌุฉ ูู ุณูุณูุฉ ูุตูุฉ ูุงุญุฏุฉ ุนูู ุดูู "temp:25C,humidity:50%,light:100". ูููุชู ูู ูู ุชุฑููุฒ ูุฐู ุงูุณูุณูุฉ ูุฅุฑุฌุงุน ุงูุจูุงูุงุช ููุงุฆู (object) ูููู ุงุณุชุฎุฏุงูู ุจุณูููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
dataString = "temp:25C,humidity:50%,light:100"
ุงูุฅุฎุฑุงุฌ:
{temp: '25C', humidity: '50%', light: '100'}
ุงูุดุฑุญ:
ูุชู ุชูุณูู ุงูุณูุณูุฉ ุจุงุณุชุฎุฏุงู ุงููุงุตูุฉุ ุซู ูุชู ุชุญููู ูู ุฌุฒุก ููุญุตูู ุนูู ุงูููุชุงุญ ูุงููููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function decodeSensorData(dataString) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
dataString = "temp:25C,humidity:50%,light:100"
ุงููุฎุฑุฌุงุช (Outputs):
{temp: '25C', humidity: '50%', light: '100'}
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
dataString = "state:on,mode:auto"
ุงููุฎุฑุฌุงุช (Outputs):
{state: 'on', mode: 'auto'}
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
dataString = "level:10"
ุงููุฎุฑุฌุงุช (Outputs):
{level: '10'}

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ูุธุงู ุชุญูู ุจุณูุท

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุธุงู ุชุญูู ุจุณูุท ูุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ. ุฃุนุทูุชู ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุงููุณุชูุฏูุฉ ููุฌููุนุฉ ูู ูุฑุงุกุงุช ุงูุญุณุงุณุงุช. ูุฌุจ ุนูู ุงููุธุงู ุฃู ููุฑุฑ ุชุดุบูู (ON) ุฃู ุฅููุงู (OFF) ุงูุณุฎุงู ุจูุงุกู ุนูู ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุงูุญุงููุฉ.
ุงูููุงุนุฏ:

  - ุฅุฐุง ูุงูุช ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุฃูู ุจู 2 ุฏุฑุฌุฉ ูู ุงููุณุชูุฏูุฉุ ูู ุจุชุดุบูู ุงูุณุฎุงู.
  - ุฅุฐุง ูุงูุช ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุฃุนูู ุจู 1 ุฏุฑุฌุฉ ูู ุงููุณุชูุฏูุฉุ ูู ุจุฅููุงู ุงูุณุฎุงู.
  - ุฎูุงู ุฐููุ ูุง ุชุบูุฑ ุงูุญุงูุฉ.
    ุงููุซุงู:
    ุงููุฏุฎู:
    targetTemp = 25
    readings = [22, 23, 24, 26, 27]
    initialState = 'OFF'
    ุงูุฅุฎุฑุงุฌ:
    ['ON', 'OFF', 'OFF', 'OFF', 'OFF']
    ุงูุดุฑุญ:
    ูู ุงูุจุฏุงูุฉุ ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ 22ุ ููู ุฃูู ูู 23 (25-2)ุ ูุฐุง ูุชู ุชุดุบูู ุงูุณุฎุงู.
    ุนูุฏูุง ุชููู ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ 23ุ ุชุจูู ุงูุญุงูุฉ ON.
    ุนูุฏูุง ุชููู 24ุ ุชุจูู ุงูุญุงูุฉ ON.
    ุนูุฏูุง ุชููู 26ุ ููู ุฃุนูู ูู 25+1ุ ูุชู ุฅููุงู ุงูุณุฎุงู.
    ุนูุฏูุง ุชููู 27ุ ุชุจูู ุงูุญุงูุฉ OFF.
    ูุงุ ููุงู ุฎุทุฃ ูู ุงููุซุงู.
    ูุซุงู ุตุญูุญ:
    targetTemp = 25
    readings = [22, 23, 24, 26, 27]
    initialState = 'OFF'
    ุงูุฎุทูุงุช:

<!-- end list -->

1.  temp = 22 (\< 23)ุ ุงูุญุงูุฉ ON.
2.  temp = 23 (\>= 23)ุ ุงูุญุงูุฉ ุชุจูู ON.
3.  temp = 24 (\>= 23)ุ ุงูุญุงูุฉ ุชุจูู ON.
4.  temp = 26 (\> 26)ุ ุงูุญุงูุฉ OFF.
5.  temp = 27 (\> 26)ุ ุงูุญุงูุฉ ุชุจูู OFF.
    ุงูุฅุฎุฑุงุฌ:
    ['ON', 'ON', 'ON', 'OFF', 'OFF']
    ุงููุต ุงููุณุงุนุฏ:
    function simulateThermostat(targetTemp, readings, initialState) {
    // ุงูุชุจ ุงูููุฏ ููุง
    }
    ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
    ุงูุงุฎุชุจุงุฑ 1:
    ุงููุฏุฎูุงุช (Inputs):
    targetTemp = 25, readings = [22, 23, 24, 26, 27], initialState = 'OFF'
    ุงููุฎุฑุฌุงุช (Outputs):
    ['ON', 'ON', 'ON', 'OFF', 'OFF']
    ุงูุงุฎุชุจุงุฑ 2:
    ุงููุฏุฎูุงุช (Inputs):
    targetTemp = 30, readings = [31, 29, 27, 30], initialState = 'OFF'
    ุงููุฎุฑุฌุงุช (Outputs):
    ['OFF', 'OFF', 'ON', 'ON']

-----

## ูุดุงูู ุงูุชุญููู ุงูุนุฏุฏู ูุงูุนููู (Numerical / Scientific Computing)

### ุชุญุฏู 1: ุญุณุงุจ ุงูุชูุงูู ุงูุนุฏุฏู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุชุงุจุฉ ุฏุงูุฉ ูุญุณุงุจ ุงูุชูุงูู ุงูุนุฏุฏู ูุฏุงูุฉ ุฑูุงุถูุฉ ุจุงุณุชุฎุฏุงู ูุงุนุฏุฉ ุงููุณุชุทูู (Rectangle Rule).
ุงููุซุงู:
ุงููุฏุฎู:
f = (x) =\> x*x
a = 0
b = 1
n = 100
ุงูุฅุฎุฑุงุฌ:
0.33...
ุงูุดุฑุญ:
ูุชู ุญุณุงุจ ูุณุงุญุฉ ุงูููุทูุฉ ุชุญุช ุงูููุญูู ุจุงุณุชุฎุฏุงู ุงููุณุชุทููุงุช ุงูุตุบูุฑุฉ.
ุงููุต ุงููุณุงุนุฏ:
function numericalIntegration(f, a, b, n) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
f = (x) =\> x*x, a = 0, b = 1, n = 100
ุงููุฎุฑุฌุงุช (Outputs):
0.33835000000000005
(ูุฏ ูุฎุชูู ููููุงู ุจูุงุกู ุนูู ุฏูุฉ ุงูุญุณุงุจ)
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
f = (x) =\> 2\*x, a = 0, b = 1, n = 10
ุงููุฎุฑุฌุงุช (Outputs):
1.0
(ุงููุงุชุฌ ูุฌุจ ุฃู ูููู ูุฑูุจูุง ูู 1)

-----

### ุชุญุฏู 2: ุญู ูุนุงุฏูุงุช ุชูุงุถููุฉ ุนุงุฏูุฉ

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุญู ูุนุงุฏูุฉ ุชูุงุถููุฉ ุนุงุฏูุฉ ูู ุงูุฏุฑุฌุฉ ุงูุฃููู ุจุงุณุชุฎุฏุงู ุทุฑููุฉ ุฃูููุฑ (Euler's Method).
ุงููุซุงู:
ุงููุฏุฎู:
dy\_dx = (x, y) =\> x + y
x0 = 0
y0 = 1
h = 0.1
steps = 5
ุงูุฅุฎุฑุงุฌ:
1.61051
ุงูุดุฑุญ:
ูุชู ุงุณุชุฎุฏุงู ุทุฑููุฉ ุฃูููุฑ ูุชูุฏูุฑ ูููุฉ y ุนูุฏ ูู ุฎุทูุฉ.
ุงููุต ุงููุณุงุนุฏ:
function eulerMethod(dy\_dx, x0, y0, h, steps) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
dy\_dx = (x, y) =\> x + y, x0 = 0, y0 = 1, h = 0.1, steps = 5
ุงููุฎุฑุฌุงุช (Outputs):
1.61051
(ุงููุงุชุฌ ูุฏ ูุฎุชูู ููููุงู)
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
dy\_dx = (x, y) =\> -2\*x, x0 = 0, y0 = 5, h = 0.5, steps = 2
ุงููุฎุฑุฌุงุช (Outputs):
4.5

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ูุธุงู ุฏููุงูููู ูุนูุฏ

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุธุงู ุฏููุงูููู ูุนูุฏ (ูุซู ุญุฑูุฉ ูุฐููุฉ ูู ุงูููุงุก ูุน ููุงููุฉ). ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุชุญุฏูุซ ูููุน ุงููุฐููุฉ ูู ูู ุฎุทูุฉ ุฒูููุฉ ูุฅุฑุฌุงุน ุงููุณุงุฑ ุงููุงูู.
ุงููุซุงู:
ุงููุฏุฎู:
initial\_velocity = 10
angle = 45
drag\_coefficient = 0.1
time\_step = 0.01
ุงูุฅุฎุฑุงุฌ:
[{x: 0, y: 0}, {x: 0.07..., y: 0.07...}, ...]
ุงูุดุฑุญ:
ูุชู ุญุณุงุจ ุงููููุน ูู ูู ุฎุทูุฉ ุฒูููุฉ ุจูุงุกู ุนูู ููุงููู ุงูููุฒูุงุก.
ุงููุต ุงููุณุงุนุฏ:
function simulateProjectileMotion(initial\_velocity, angle, drag\_coefficient, time\_step) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
initial\_velocity = 10, angle = 45, drag\_coefficient = 0, time\_step = 0.1
ุงููุฎุฑุฌุงุช (Outputs):
(ูุณุงุฑ ุงููุฐููุฉ ุจุฏูู ููุงููุฉ)
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
initial\_velocity = 10, angle = 45, drag\_coefficient = 0.1, time\_step = 0.1
ุงููุฎุฑุฌุงุช (Outputs):
(ูุณุงุฑ ุงููุฐููุฉ ูุน ููุงููุฉ)

-----

## ูุดุงูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุชูููุฏู (Generative AI / Procedural Content)

### ุชุญุฏู 1: ุชูููุฏ ูุต ุนุดูุงุฆู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชูููุฏ ูุต ุนุดูุงุฆู ุจุณูุท ุจูุงุกู ุนูู ูุงุฆูุฉ ูู ุงููููุงุช ูุงูููุงุนุฏ.
ุงููุซุงู:
ุงููุฏุฎู:
words = ["A", "B", "C"]
rules = {
"start": ["A", "B"],
"A": ["C", "B"],
"B": ["C"]
}
maxLength = 5
ุงูุฅุฎุฑุงุฌ:
"A C B C B"
ุงูุดุฑุญ:
ูุชู ุชูููุฏ ุงููุต ุนู ุทุฑูู ุงุฎุชูุงุฑ ูููุฉ ูู ุงูููุงุนุฏ ุจุดูู ุนุดูุงุฆู.
ุงููุต ุงููุณุงุนุฏ:
function generateText(words, rules, maxLength) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
words = ["A", "B"], rules = {"start": ["A"], "A": ["B"], "B": ["A"]}, maxLength = 5
ุงููุฎุฑุฌุงุช (Outputs):
"A B A B A"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
words = ["hello", "world"], rules = {"start": ["hello"], "hello": ["world"]}, maxLength = 3
ุงููุฎุฑุฌุงุช (Outputs):
"hello world"

-----

### ุชุญุฏู 2: ุชูููุฏ ุฎุฑุงุฆุท ุนุดูุงุฆูุฉ

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชูููุฏ ุฎุฑูุทุฉ ุซูุงุฆูุฉ ุงูุฃุจุนุงุฏ ุจุดูู ุนุดูุงุฆู. ูุฌุจ ุฃู ุชููู ุงูุฎุฑูุทุฉ ุนุจุงุฑุฉ ุนู ูุตูููุฉ ูู ุงูุฃุฑูุงูุ ุญูุซ ููุซู ูู ุฑูู ููุนูุง ูู ุงูุชุถุงุฑูุณ (ูุซู 0 ููููุงูุ 1 ููุฃุฑุถุ 2 ููุฌุจุงู).
ุงููุซุงู:
ุงููุฏุฎู:
width = 5
height = 5
terrains = [0, 1, 2]
ุงูุฅุฎุฑุงุฌ:
[
[1, 1, 0, 2, 1],
[0, 1, 1, 2, 0],
[1, 0, 1, 1, 1],
[2, 2, 1, 0, 1],
[1, 1, 0, 1, 1]
]
ุงูุดุฑุญ:
ูุชู ุชูููุฏ ุงูุฎุฑูุทุฉ ุจุดูู ุนุดูุงุฆูุ ูุน ุงูุฃุฎุฐ ูู ุงูุงุนุชุจุงุฑ ุจุนุถ ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ ูุถูุงู ุฃู ุชููู ุงูุฎุฑูุทุฉ ุฐุงุช ูุนูู (ูุซู ูุฌูุฏ ูุชู ูู ููุณ ุงูุชุถุงุฑูุณ).
ุงููุต ุงููุณุงุนุฏ:
function generateMap(width, height, terrains) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
width = 3, height = 3, terrains = [0, 1]
ุงููุฎุฑุฌุงุช (Outputs):
(ูุตูููุฉ 3x3 ุชุญุชูู ุนูู ุฃุตูุงุฑ ููุงุญุฏุงุช)

-----

### ุชุญุฏู 3: ุชูููุฏ ูุตุฉ ุจูุงุกู ุนูู ุงูููุงุนุฏ

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชูููุฏ ูุตุฉ ุจุณูุทุฉ ุจูุงุกู ุนูู ูุฌููุนุฉ ูุนูุฏุฉ ูู ุงูููุงุนุฏ (Grammar). ูุฌุจ ุฃู ุชููู ุงููุตุฉ ููุทููุฉ ูุชุชุจุน ุงูููุงุนุฏ ุงููุญููุฉ ุงููุญุฏุฏุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
grammar = {
"story": ["\<sentence\> \<story\>.", "\<sentence\>."],
"sentence": ["\<noun\> \<verb\> \<adjective\>."],
"noun": ["A man", "A dog", "A cat"],
"verb": ["ran", "slept", "ate"],
"adjective": ["quickly", "lazily", "happily"]
}
startSymbol = "story"
ุงูุฅุฎุฑุงุฌ:
"A man ran quickly. A dog slept lazily."
ุงูุดุฑุญ:
ูุชู ุชูููุฏ ุงููุตุฉ ุนู ุทุฑูู ุงุณุชุจุฏุงู ุงูุฑููุฒ (ูุซู \<noun\>) ุจูููุงุช ูู ุงููุงุฆูุฉ ุงููุญุฏุฏุฉ.
ุงููุต ุงููุณุงุนุฏ:
function generateStory(grammar, startSymbol) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
grammar = {"story": ["\<sentence\>."], "sentence": ["\<noun\> \<verb\>."], "noun": ["I"], "verb": ["am"]}, startSymbol = "story"
ุงููุฎุฑุฌุงุช (Outputs):
"I am."

-----

# ๐ต ูุงุฏุฑุฉ (Rare / Specialized / Cutting-edge)

-----

## ูุดุงูู ุงููุนุงูุฌุฉ ุงูููุงุฒูุฉ ูุงููุชุฒุงููุฉ (Parallel / Concurrent Programming)

### ุชุญุฏู 1: ูุดููุฉ ุงูููุชุฌ-ุงููุณุชููู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุดููุฉ ุงูููุชุฌ-ุงููุณุชููู (Producer-Consumer Problem) ุจุงุณุชุฎุฏุงู ุฏูุงู ูุชุฒุงููุฉ. ูุฌุจ ุฃู ูููู ุงูููุชุฌ ุจุฅูุชุงุฌ ุนูุงุตุฑ ููุถุนูุง ูู ูุฎุฒู ูุคูุช (buffer)ุ ุจูููุง ูููู ุงููุณุชููู ุจุฃุฎุฐ ุงูุนูุงุตุฑ ูู ุงููุฎุฒู.
ุงููุซุงู:
ุงููุฏุฎู:
bufferSize = 3
itemsToProduce = 5
ุงูุฅุฎุฑุงุฌ:
[
"Producer produced item 0",
"Consumer consumed item 0",
"Producer produced item 1",
...
]
ุงูุดุฑุญ:
ูุชู ูุญุงูุงุฉ ุงูุชูุงุนู ุจูู ุงูููุชุฌูู ูุงููุณุชููููู.
ุงููุต ุงููุณุงุนุฏ:
function producerConsumer(bufferSize, itemsToProduce) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
bufferSize = 1, itemsToProduce = 2
ุงููุฎุฑุฌุงุช (Outputs):
(ุชุณูุณู ููุทูู ููุฅูุชุงุฌ ูุงูุงุณุชููุงู)

-----

### ุชุญุฏู 2: ุฎูุงุฑุฒููุฉ Dekker ููุญู ุงููุดุชุฑู

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชุทุจูู ุฎูุงุฑุฒููุฉ Dekker ููุญู ุงููุดุชุฑู (mutual exclusion) ุจูู ุนูููุชูู (threads). ูุฌุจ ุฃู ุชุถูู ุงูุฎูุงุฑุฒููุฉ ุฃู ุงูุนูููุชูู ูุง ุชุฏุฎูุงู ุฅูู ุงููุณู ุงูุญุฑุฌ (critical section) ูู ููุณ ุงูููุช.
ุงููุซุงู:
ุงููุฏุฎู:
threads = 2
iterations = 5
ุงูุฅุฎุฑุงุฌ:
"Thread 1 entered critical section"
"Thread 1 exited critical section"
"Thread 2 entered critical section"
"Thread 2 exited critical section"
...
ุงูุดุฑุญ:
ูุชู ุถูุงู ุฃู ูู ุนูููุฉ ุชุฏุฎู ุฅูู ุงููุณู ุงูุญุฑุฌ ุจุดูู ุญุตุฑู.
ุงููุต ุงููุณุงุนุฏ:
function dekkerAlgorithm(threads, iterations) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
threads = 2, iterations = 2
ุงููุฎุฑุฌุงุช (Outputs):
(ุชุณูุณู ููุทูู ูุฏุฎูู ุงูุนูููุงุช ูููุณู ุงูุญุฑุฌ)

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุงูุชูุงุฒู ูู R-tree

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุชูุงุฒู ูุฅุฏุฎุงู ุงูุจูุงูุงุช ูู ุดุฌุฑุฉ R-tree. ูุฌุจ ุฃู ุชุธูุฑ ุงูุฎูุงุฑุฒููุฉ ููู ูููู ูุนุฏุฉ ุนูููุงุช ุฃู ุชุถูู ุจูุงูุงุช ุฅูู ุงูุดุฌุฑุฉ ุจุดูู ูุชุฒุงูู.
ุงููุซุงู:
ุงููุฏุฎู:
initial\_tree = ...
data\_to\_insert = [...]
threads = 4
ุงูุฅุฎุฑุงุฌ:
(ุดุฌุฑุฉ R-tree ุงูููุงุฆูุฉ ุจุนุฏ ุงูุฅุฏุฑุงุฌ)
ุงูุดุฑุญ:
ูุชู ุฅุธูุงุฑ ููู ูููู ูุนุฏุฉ ุนูููุงุช ุฃู ุชุนูู ุจุดูู ูุชุฒุงูู ุฏูู ุฃู ุชุชุณุจุจ ูู ุชูู ุงูุจูุงูุงุช.
ุงููุต ุงููุณุงุนุฏ:
function parallelRTree(initial\_tree, data\_to\_insert, threads) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ุตูุบุฉ ูุชููุนุฉ ูู R-tree)

-----

## ูุดุงูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชูุฏู (Advanced AI / Reinforcement Learning)

### ุชุญุฏู 1: ุฎูุงุฑุฒููุฉ Alpha-Beta Pruning

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชูููุฐ ุฎูุงุฑุฒููุฉ ุงูุชูููู ุฃููุง-ุจูุชุง (Alpha-Beta Pruning) ููุจุญุซ ูู ุดุฌุฑุฉ ูุนุจุฉ (game tree) ูุชุญุณูู ุฃุฏุงุก ุฎูุงุฑุฒููุฉ Minimax.
ุงููุซุงู:
ุงููุฏุฎู:
game\_tree = ...
alpha = -infinity
beta = +infinity
depth = 3
ุงูุฅุฎุฑุงุฌ:
(ุฃูุถู ูููุฉ ููููุฉ ููุนุจ)
ุงูุดุฑุญ:
ุชุณุชุฎุฏู ุงูุฎูุงุฑุฒููุฉ ูุชูููู ุงููุฑูุน ุงูุชู ูุง ุชุคุฏู ุฅูู ุญู ุฃูุซู.
ุงููุต ุงููุณุงุนุฏ:
function alphaBetaPruning(game\_tree, alpha, beta, depth) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูููุฉ ุฑูููุฉ)

-----

### ุชุญุฏู 2: ุฎูุงุฑุฒููุฉ Q-Learning

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชูููุฐ ุฎูุงุฑุฒููุฉ Q-Learning ุจุณูุทุฉ ูุชุฏุฑูุจ ูููู (agent) ุนูู ุงูุชููู ูู ุจูุฆุฉ (Grid World) ุจุณูุทุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
grid\_world = ...
learning\_rate = 0.1
discount\_factor = 0.9
episodes = 100
ุงูุฅุฎุฑุงุฌ:
(ูุตูููุฉ Q-table ุงูููุงุฆูุฉ)
ุงูุดุฑุญ:
ูุชู ุชุนูู ุฃูุถู ุงูุฅุฌุฑุงุกุงุช ูู ูู ุญุงูุฉ.
ุงููุต ุงููุณุงุนุฏ:
function qLearning(grid\_world, learning\_rate, discount\_factor, episodes) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูุตูููุฉ Q-table)

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ Monte Carlo Tree Search (MCTS)

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุจุญุซ ุดุฌุฑุฉ ูููุช ูุงุฑูู (MCTS) ููุนุจ ูุนุจุฉ ุจุณูุทุฉ (ูุซู Tic-Tac-Toe). ูุฌุจ ุฃู ุชุชุถูู ุงูุฎูุงุฑุฒููุฉ ูุฑุงุญู ุงูุงุฎุชูุงุฑ ูุงูุชูุณูุน ูุงููุญุงูุงุฉ ูุงูุงูุชุดุงุฑ.
ุงููุซุงู:
ุงููุฏุฎู:
game\_state = ...
simulations = 1000
ุงูุฅุฎุฑุงุฌ:
(ุฃูุถู ุญุฑูุฉ ุชุงููุฉ)
ุงูุดุฑุญ:
ุชุณุชุฎุฏู MCTS ููุญุงูุงุฉ ุงููุชุงุฆุฌ ุงููุญุชููุฉ ูุชุญุฏูุฏ ุฃูุถู ุญุฑูุฉ.
ุงููุต ุงููุณุงุนุฏ:
function mcts(game\_state, simulations) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ุฃูุถู ุญุฑูุฉ)

-----

## ูุดุงูู ุงูุชุดููุฑ ุงููุชูุฏู (Advanced Cryptography)

### ุชุญุฏู 1: ุฎูุงุฑุฒููุฉ RSA ุงูุจุณูุทุฉ

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุชุงุจุฉ ุฏุงูุฉ ุชููู ุจุชูููุฏ ููุงุชูุญ RSA (ุนุงู ูุฎุงุต) ุจุณูุทุฉ ุจุงุณุชุฎุฏุงู ุฑูููู ุฃููููู.
ุงููุซุงู:
ุงููุฏุฎู:
p = 7, q = 11
ุงูุฅุฎุฑุงุฌ:
{publicKey: {n: 77, e: ...}, privateKey: {n: 77, d: ...}}
ุงูุดุฑุญ:
ูุชู ุชูููุฏ ุงูููุชุงุญูู ุจุงุณุชุฎุฏุงู ุงูุฃุฑูุงู ุงูุฃูููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function generateRSAKeys(p, q) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูุงุฆู ูุญุชูู ุนูู ุงูููุชุงุญูู)

-----

### ุชุญุฏู 2: ุชุดููุฑ ููู ุชุดููุฑ ุงูุฑุณุงุฆู ุจุงุณุชุฎุฏุงู RSA

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุชุงุจุฉ ุฏุงูุชูู: ูุงุญุฏุฉ ูุชุดููุฑ ุฑุณุงูุฉ ุจุงุณุชุฎุฏุงู ุงูููุชุงุญ ุงูุนุงูุ ูุงูุฃุฎุฑู ููู ุชุดููุฑูุง ุจุงุณุชุฎุฏุงู ุงูููุชุงุญ ุงูุฎุงุต.
ุงููุซุงู:
ุงููุฏุฎู:
message = "Hello"
publicKey = {n: 77, e: ...}
privateKey = {n: 77, d: ...}
ุงูุฅุฎุฑุงุฌ:
(ุงูุฑุณุงูุฉ ุงูุฃุตููุฉ ุจุนุฏ ุงูุชุดููุฑ ููู ุงูุชุดููุฑ)
ุงูุดุฑุญ:
ูุชู ุงุณุชุฎุฏุงู ุงูููุงุชูุญ ูุชุดููุฑ ููู ุงูุชุดููุฑ.
ุงููุต ุงููุณุงุนุฏ:
function encryptRSA(message, publicKey) {
// ุงูุชุจ ุงูููุฏ ููุง
}
function decryptRSA(encrypted, privateKey) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ุฑุณุงูุฉ ูุตูุฉ)

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ุชุจุงุฏู ุงูููุงุชูุญ Diffie-Hellman

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุฎูุงุฑุฒููุฉ ุชุจุงุฏู ุงูููุงุชูุญ Diffie-Hellman. ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุฅูุดุงุก ููุชุงุญ ุณุฑู ูุดุชุฑู ุจูู ุทุฑููู (Alice ู Bob) ุฏูู ุชุจุงุฏู ุงูููุชุงุญ ููุณู.
ุงููุซุงู:
ุงููุฏุฎู:
p = 23, g = 5
a = 6, b = 15
ุงูุฅุฎุฑุงุฌ:
"Shared Secret Key: 8"
ุงูุดุฑุญ:
ูุชู ุญุณุงุจ ุงูููุชุงุญ ุงููุดุชุฑู ุจุงุณุชุฎุฏุงู ุงููุนููุงุช ุงููุญุฏุฏุฉ.
ุงููุต ุงููุณุงุนุฏ:
function diffieHellman(p, g, a, b) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
"Shared Secret Key: 8"

-----

## ูุดุงูู ุชุญููู ุงููุตูุต ุงููุจูุฑุฉ / NLP (Big Text / NLP Problems)

### ุชุญุฏู 1: ุญุณุงุจ ุชูุฑุงุฑ ุงููููุงุช

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ ูุจูุฑุฉ. ูููุชู ูู ุญุณุงุจ ุชูุฑุงุฑ ูู ูููุฉ ูู ุงููุต. ูุฌุจ ุฃู ูุชู ุชุฌุงูู ุญุงูุฉ ุงูุญุฑูู ูุนูุงูุงุช ุงูุชุฑููู.
ุงููุซุงู:
ุงููุฏุฎู:
text = "Hello world, hello\!"
ุงูุฅุฎุฑุงุฌ:
{"hello": 2, "world": 1}
ุงูุดุฑุญ:
ูุชู ุชูุณูู ุงููุต ุฅูู ูููุงุช ูุญุณุงุจ ุชูุฑุงุฑ ูู ูููุฉ.
ุงููุต ุงููุณุงุนุฏ:
function wordFrequency(text) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
text = "The quick brown fox jumps over the lazy dog."
ุงููุฎุฑุฌุงุช (Outputs):
{"the": 2, "quick": 1, "brown": 1, "fox": 1, "jumps": 1, "over": 1, "lazy": 1, "dog": 1}

-----

### ุชุญุฏู 2: ุงูุจุญุซ ุนู ุงููููุงุช ุงูุฃูุซุฑ ุชูุฑุงุฑูุง

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ุฃุนุทูุชู ุณูุณูุฉ ูุตูุฉ. ูููุชู ูู ุฅูุฌุงุฏ ุงููููุงุช ุงูุฎูุณุฉ ุงูุฃูุซุฑ ุชูุฑุงุฑูุง ูู ุงููุต.
ุงููุซุงู:
ุงููุฏุฎู:
text = "lorem ipsum dolor sit amet lorem ipsum dolor"
ุงูุฅุฎุฑุงุฌ:
["lorem", "ipsum", "dolor", "sit", "amet"]
ุงูุดุฑุญ:
ูุชู ุฅูุฌุงุฏ ุงููููุงุช ุงูุฎูุณุฉ ุงูุฃูุซุฑ ุชูุฑุงุฑูุง.
ุงููุต ุงููุณุงุนุฏ:
function top5Words(text) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
text = "lorem ipsum dolor sit amet lorem ipsum dolor"
ุงููุฎุฑุฌุงุช (Outputs):
["lorem", "ipsum", "dolor", "sit", "amet"]

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ุชุญููู ุงููุดุงุนุฑ

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ุชุญููู ุงููุดุงุนุฑ (Sentiment Analysis) ููุต ูุนูู. ุฃุนุทูุชู ูุตูุง ููุงุฆูุฉ ูู ุงููููุงุช ุงูุฅูุฌุงุจูุฉ ูุงูุณูุจูุฉ. ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุชุตููู ุงููุต ุนูู ุฃูู "ุฅูุฌุงุจู" (positive) ุฃู "ุณูุจู" (negative) ุฃู "ูุญุงูุฏ" (neutral) ุจูุงุกู ุนูู ุงููููุงุช ุงูููุฌูุฏุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
text = "I love this product, it's great\!"
positive\_words = ["love", "great"]
negative\_words = ["hate", "bad"]
ุงูุฅุฎุฑุงุฌ:
"positive"
ุงูุดุฑุญ:
ุนุฏุฏ ุงููููุงุช ุงูุฅูุฌุงุจูุฉ ุฃูุจุฑ ูู ุงููููุงุช ุงูุณูุจูุฉ.
ุงููุต ุงููุณุงุนุฏ:
function analyzeSentiment(text, positive\_words, negative\_words) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
text = "This is a great product.", positive\_words = ["great", "love"], negative\_words = ["bad", "hate"]
ุงููุฎุฑุฌุงุช (Outputs):
"positive"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
text = "This product is so bad.", positive\_words = ["great", "love"], negative\_words = ["bad", "hate"]
ุงููุฎุฑุฌุงุช (Outputs):
"negative"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
text = "This is an average product.", positive\_words = ["great", "love"], negative\_words = ["bad", "hate"]
ุงููุฎุฑุฌุงุช (Outputs):
"neutral"

-----

## ูุดุงูู ุงูุฑุณููุงุช ูุงููุงูุน (Graphics / Game Dev Problems)

### ุชุญุฏู 1: ุญุณุงุจ ุชุตุงุฏู ุฏุงุฆุฑุชูู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุฏุงุฆุฑุชุงู ุชุชูุงุทุนุงู (ุชุชุตุงุฏูุงู) ูู ูุณุชูู ุซูุงุฆู ุงูุฃุจุนุงุฏ. ุฃุนุทูุชู ูุฑูุฒ ูู ุฏุงุฆุฑุฉ ููุตู ูุทุฑูุง.
ุงููุซุงู:
ุงููุฏุฎู:
circle1 = {x: 0, y: 0, r: 2}
circle2 = {x: 3, y: 0, r: 2}
ุงูุฅุฎุฑุงุฌ:
true
ุงูุดุฑุญ:
ุงููุณุงูุฉ ุจูู ุงููุฑูุฒูู ูู 3ุ ููุฌููุน ุฃูุตุงู ุงูุฃูุทุงุฑ ูู 4. ุจูุง ุฃู 3 \< 4ุ ูุฅูููุง ูุชุตุงุฏูุงู.
ุงููุต ุงููุณุงุนุฏ:
function checkCircleCollision(circle1, circle2) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
circle1 = {x: 0, y: 0, r: 2}, circle2 = {x: 3, y: 0, r: 2}
ุงููุฎุฑุฌุงุช (Outputs):
true
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
circle1 = {x: 0, y: 0, r: 1}, circle2 = {x: 3, y: 0, r: 1}
ุงููุฎุฑุฌุงุช (Outputs):
false
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
circle1 = {x: 0, y: 0, r: 5}, circle2 = {x: 0, y: 0, r: 5}
ุงููุฎุฑุฌุงุช (Outputs):
true

-----

### ุชุญุฏู 2: ุญุณุงุจ ุธูุงู ุจุณูุทุฉ

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุญุณุงุจ ุงูุธูุงู ุงูุจุณูุทุฉ ูู ูุดูุฏ ุซูุงุฆู ุงูุฃุจุนุงุฏ. ุฃุนุทูุชู ูุตุฏุฑ ุถูุก (ููุทุฉ) ููุฌููุนุฉ ูู ุงูุนูุงุฆู (ููุงุท). ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุฅุฑุฌุงุน ุงูููุงุท ุงูุชู ุชุดูู ุญุฏูุฏ ุงูุธูุงู.
ุงููุซุงู:
ุงููุฏุฎู:
light\_source = {x: 1, y: 1}
obstacles = [{x: 2, y: 2}, {x: 3, y: 3}]
ุงูุฅุฎุฑุงุฌ:
(ููุงุท ุชุดูู ุญุฏูุฏ ุงูุธูุงู)
ุงูุดุฑุญ:
ูุชู ุฑุณู ุฎุทูุท ูู ูุตุฏุฑ ุงูุถูุก ุฅูู ุงูุนูุงุฆู ูุชุญุฏูุฏ ููุงุทู ุงูุธู.
ุงููุต ุงููุณุงุนุฏ:
function calculateShadows(light\_source, obstacles) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูุฌููุนุฉ ูู ุงูููุงุท)

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ูุธุงู ููุฒูุงุฆู

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุธุงู ููุฒูุงุฆู ุจุณูุท (ูุซู ูุธุงู ุฌุฒูุฆุงุช). ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุชุญุฏูุซ ูููุน ูุณุฑุนุฉ ูู ุฌุฒูุก ูู ูู ุฎุทูุฉ ุฒูููุฉ ุจูุงุกู ุนูู ููุงููู ุงูููุฒูุงุก (ูุซู ุงูุฌุงุฐุจูุฉ).
ุงููุซุงู:
ุงููุฏุฎู:
particles = [
{x: 0, y: 0, vx: 1, vy: 1},
{x: 10, y: 10, vx: -1, vy: -1}
]
time\_step = 0.1
gravity = {x: 0, y: -9.8}
ุงูุฅุฎุฑุงุฌ:
(ุญุงูุฉ ุงูุฌุฒูุฆุงุช ุจุนุฏ ุฎุทูุฉ ูุงุญุฏุฉ)
ุงูุดุฑุญ:
ูุชู ุชุญุฏูุซ ุณุฑุนุฉ ููููุน ูู ุฌุฒูุก ุจุงุณุชุฎุฏุงู ุงูููุงููู ุงูููุฒูุงุฆูุฉ.
ุงููุต ุงููุณุงุนุฏ:
function simulatePhysics(particles, time\_step, gravity) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูุงุฆู ูุญุชูู ุนูู ุญุงูุฉ ุงูุฌุฒูุฆุงุช)

-----

## ูุดุงูู ุงูุถุบุท ุฃู ุงูุชุฎุฒูู Optimization / Compression)

### ุชุญุฏู 1: ุถุบุท Run-Length Encoding

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุถุบุท ุณูุณูุฉ ูุตูุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุฉ RLE (Run-Length Encoding) ุงูุจุณูุทุฉ. ูุชู ุถุบุท ุงูุณูุณูุฉ ุนู ุทุฑูู ุงุณุชุจุฏุงู ุชูุฑุงุฑ ุงูุญุฑู ุจุนุฏุฏู.
ุงููุซุงู:
ุงููุฏุฎู:
s = "AAAABBC"
ุงูุฅุฎุฑุงุฌ:
"A4B2C1"
ุงูุดุฑุญ:
ูุชู ุงุณุชุจุฏุงู ุงูุญุฑู ุงููุชูุฑุฑ ุจุนุฏุฏู.
ุงููุต ุงููุณุงุนุฏ:
function rleCompression(s) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
s = "AAAABBC"
ุงููุฎุฑุฌุงุช (Outputs):
"A4B2C1"
ุงูุงุฎุชุจุงุฑ 2:
ุงููุฏุฎูุงุช (Inputs):
s = "A"
ุงููุฎุฑุฌุงุช (Outputs):
"A1"
ุงูุงุฎุชุจุงุฑ 3:
ุงููุฏุฎูุงุช (Inputs):
s = "ABC"
ุงููุฎุฑุฌุงุช (Outputs):
"A1B1C1"

-----

### ุชุญุฏู 2: ุถุบุท Huffman

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุจูุงุก ุดุฌุฑุฉ Huffman ูุถุบุท ุงูุจูุงูุงุช. ุฃุนุทูุชู ูุงุฆูุฉ ุจุชุฑุฏุฏุงุช ุงูุฃุญุฑู. ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุจูุงุก ุดุฌุฑุฉ Huffman ูุฅุฑุฌุงุน ุฌุฏูู ุงูุชุดููุฑ.
ุงููุซุงู:
ุงููุฏุฎู:
frequencies = {'A': 5, 'B': 2, 'C': 1}
ุงูุฅุฎุฑุงุฌ:
{'A': '0', 'B': '10', 'C': '11'}
ุงูุดุฑุญ:
ูุชู ุจูุงุก ุงูุดุฌุฑุฉ ูู ุงูุฃุณูู ุฅูู ุงูุฃุนูู.
ุงููุต ุงููุณุงุนุฏ:
function huffmanCoding(frequencies) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
frequencies = {'A': 5, 'B': 2, 'C': 1}
ุงููุฎุฑุฌุงุช (Outputs):
{'A': '0', 'B': '10', 'C': '11'}

-----

### ุชุญุฏู 3: ุถุบุท Z-Buffer

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุชุทุจูู ุฎูุงุฑุฒููุฉ ุถุบุท Z-buffer ูุถุบุท ุงูุจูุงูุงุช. ูุฐู ุงูุฎูุงุฑุฒููุฉ ุชุณุชุฎุฏู ูู ุงูุฑุณููุงุช ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ ูุชูููู ุญุฌู ุงูุจูุงูุงุช.
ุงููุซุงู:
ุงููุฏุฎู:
z\_buffer = [...]
ุงูุฅุฎุฑุงุฌ:
(ุจูุงูุงุช ูุถุบูุทุฉ)
ุงูุดุฑุญ:
ุชุณุชุฎุฏู ุงูุฎูุงุฑุฒููุฉ ุชูููุงุช ุฎุงุตุฉ ูุชูููู ุญุฌู ุงูุจูุงูุงุช.
ุงููุต ุงููุณุงุนุฏ:
function zBufferCompression(z\_buffer) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ุตูุบุฉ ุจูุงูุงุช ูุถุบูุทุฉ)

-----

## ูุดุงูู ุงูููุฏุณุฉ ูุงูููุฒูุงุก ุงููุนูุฏุฉ (Computational / Scientific Geometry)

### ุชุญุฏู 1: ุญุณุงุจ ูุฑูุฒ ุงูุซูู

ุงููุณุชูู: ุณูู
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุญุณุงุจ ูุฑูุฒ ุงูุซูู ููุถูุน ุจุณูุท. ุฃุนุทูุชู ุฅุญุฏุงุซูุงุช ุฑุคูุณ ุงููุถูุน.
ุงููุซุงู:
ุงููุฏุฎู:
vertices = [{x: 0, y: 0}, {x: 1, y: 0}, {x: 0, y: 1}]
ุงูุฅุฎุฑุงุฌ:
{x: 0.33..., y: 0.33...}
ุงูุดุฑุญ:
ูุชู ุญุณุงุจ ูุชูุณุท ุฅุญุฏุงุซูุงุช ุงูุฑุคูุณ.
ุงููุต ุงููุณุงุนุฏ:
function centroidOfPolygon(vertices) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
ุงูุงุฎุชุจุงุฑ 1:
ุงููุฏุฎูุงุช (Inputs):
vertices = [{x: 0, y: 0}, {x: 1, y: 0}, {x: 0, y: 1}]
ุงููุฎุฑุฌุงุช (Outputs):
{x: 0.3333333333333333, y: 0.3333333333333333}

-----

### ุชุญุฏู 2: ุญุณุงุจ ุชูุงุทุน ุจูู ุฎุท ููุซูุซ

ุงููุณุชูู: ูุชูุณุท
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ุญุณุงุจ ููุทุฉ ุงูุชูุงุทุน ุจูู ุฎุท ูุณุชููู ููุซูุซ ูู ุงููุถุงุก ุซูุงุซู ุงูุฃุจุนุงุฏ.
ุงููุซุงู:
ุงููุฏุฎู:
line\_start = {x: 0, y: 0, z: 0}
line\_end = {x: 1, y: 1, z: 1}
triangle\_vertices = [{x: 0, y: 0, z: 1}, {x: 1, y: 0, z: 1}, {x: 0, y: 1, z: 1}]
ุงูุฅุฎุฑุงุฌ:
{x: 0.5, y: 0.5, z: 1}
ุงูุดุฑุญ:
ูุชู ุงุณุชุฎุฏุงู ุงูุฌุจุฑ ุงูุฎุทู ูุญุณุงุจ ููุทุฉ ุงูุชูุงุทุน.
ุงููุต ุงููุณุงุนุฏ:
function lineTriangleIntersection(line\_start, line\_end, triangle\_vertices) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ููุทุฉ ุงูุชูุงุทุน)

-----

### ุชุญุฏู 3: ูุญุงูุงุฉ ูุธุงู ุงูุฌุงุฐุจูุฉ

ุงููุณุชูู: ุตุนุจ
ูุตู ุงูุชุญุฏู:
ูููุชู ูู ูุญุงูุงุฉ ูุธุงู ูู ุงูุฃุฌุณุงู ุงูุชู ุชุชุฃุซุฑ ุจุงูุฌุงุฐุจูุฉ (N-body simulation). ูุฌุจ ุฃู ุชููู ุงูุฏุงูุฉ ุจุชุญุฏูุซ ูููุน ูุณุฑุนุฉ ูู ุฌุณู ูู ูู ุฎุทูุฉ ุฒูููุฉ.
ุงููุซุงู:
ุงููุฏุฎู:
bodies = [
{x: 0, y: 0, vx: 0, vy: 0, mass: 1000},
{x: 10, y: 0, vx: 0, vy: 1, mass: 1}
]
time\_step = 0.1
G = 6.674e-11
ุงูุฅุฎุฑุงุฌ:
(ุญุงูุฉ ุงูุฃุฌุณุงู ุจุนุฏ ุฎุทูุฉ ูุงุญุฏุฉ)
ุงูุดุฑุญ:
ูุชู ุชุทุจูู ููุงููู ุงูุฌุงุฐุจูุฉ ูุญุณุงุจ ุงูููู ุจูู ูู ุฌุณููู.
ุงููุต ุงููุณุงุนุฏ:
function nBodySimulation(bodies, time\_step, G) {
// ุงูุชุจ ุงูููุฏ ููุง
}
ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
(ูุงุฆู ูุญุชูู ุนูู ุญุงูุฉ ุงูุฃุฌุณุงู)

```
```